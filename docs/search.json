[{"path":"index.html","id":"capa","chapter":"Capa","heading":"Capa","text":"","code":""},{"path":"prefácio.html","id":"prefácio","chapter":"Prefácio","heading":"Prefácio","text":"","code":""},{"path":"base-r.html","id":"base-r","chapter":"1 Pré-requisitos","heading":"1 Pré-requisitos","text":"","code":""},{"path":"base-r.html","id":"introdução","chapter":"1 Pré-requisitos","heading":"1.1 Introdução","text":"O objetivo desta seção é","code":""},{"path":"base-r.html","id":"pacotes","chapter":"1 Pré-requisitos","heading":"1.2 Pacotes","text":"","code":""},{"path":"base-r.html","id":"versão-do-r","chapter":"1 Pré-requisitos","heading":"1.3 Versão do R","text":"","code":""},{"path":"base-r.html","id":"dados","chapter":"1 Pré-requisitos","heading":"1.4 Dados","text":"","code":""},{"path":"cap2.html","id":"cap2","chapter":"2 Introdução","heading":"2 Introdução","text":"","code":""},{"path":"cap2.html","id":"histórico-deste-livro","chapter":"2 Introdução","heading":"2.1 Histórico deste livro","text":"Este livro foi estruturado partir da apostila elaborada pelos pesquisadores Diogo B. Provete, Fernando R. da Silva e Thiago Gonçalves-Souza para ministrar o curso Estatística aplicada à ecologia usando o R PPG em Biologia Animal da UNESP de São José Rio Preto/SP, em abril de 2011. Os três pesquisadores eram então alunos PPG em Biologia Animal quando elaboraram o material disponibilizado na apostila. proposta de transformar apostila em livro sempre foi um tópico recorrente desde 2011, e concretizado agora, 10 anos depois.Neste período, Diogo, Fernando e Thiago foram contratados pela Universidade Federal de Mato Grosso Sul, Universidade Federal de São Carlos campus Sorocaba, e Universidade Federal Rural de Pernambuco, respectivamente. Nestes anos eles ofertaram diferentes versões curso Estatística aplicada à ecologia usando o R para alunos de graduação e pós-graduação em diferentes instituições Brasil. possibilidade da oferta destes novos cursos fortaleceu ideia de trasformar apostila em um livro com base nas experiências dos pesquisadores em sala de aula.Considerando que novas abordagens ecológicas vêm sendo descritas e criadas uma taxa elevada nos últimos anos, era de se esperar que informações disponíveis na apostila estivessem defasadas após 10 anos. Por este motivo, Diogo, Fernando e Thiago convidaram outros dois pesquisadores, Gustavo B. Paterno da Georg-August-University Göttingen e Maurício H. Vancine PPG em Ecologia, Evolução e Biodiversidade da UNESP Câmpus de Rio Claro, que são referências uso de estatística em ecologia usando o R. Com o time completo, passaram mais de um ano realizando reuniões, compartilhando scripts e pagando cerveja para os coautores por capítulos atrasados até chegarem neste primeira versão livro.","code":""},{"path":"cap2.html","id":"objetivo-deste-livro","chapter":"2 Introdução","heading":"2.2 Objetivo deste livro","text":"Nossa proposta com este livro é de traçar o melhor caminho (pelo menos nosso ponto de vista) entre questões ecológicas e os métodos estatísticos mais robustos para testá-las. Guiar seus passos nesse caminho (nem sempre linear) necessita que você utilize um requisito básico: o de utilizar seu esforço para caminhar. O nosso esforço, em contrapartida, será o de indicar melhores direções para que você adquira certa independência em análises ecológicas. Um dos nossos objetivos é mostrar que o conhecimento de teorias ecológicas e utilização de questões apropriadas são o primeiro passo na caminhada rumo à compreensão da lógica estatística. Não deixe que estatística se torne “pedra seu caminho.” Em nossa opinião, programas com ambiente de programação favorecem o entendimento da lógica estatística, uma vez que cada passo (lembre-se de que você está caminhado em uma estrada desconhecida e cheia de pedras) precisa ser coordenado, ou seja, linhas de comando (detalhes abaixo) precisam ser compreendidas para que você teste suas hipóteses.primeira parte deste livro pretende utilizar uma estratégia que facilita escolha teste estatístico apropriado, por meio da seleção de questões/hipóteses claras e da ligação dessas hipóteses com teoria e o método (veja Figura 3.1 Capítulo 3). Enfatizamos que é fundamental ter em mente aonde se quer chegar, para poder escolher o que deve ser feito. Posteriormente à escolha de suas questões, é necessário transferir o contexto ecológico para um contexto meramente estatístico (hipótese nula/alternativa). partir da definição de uma hipótese nula, partiremos para aplicação de cada teste estatístico (de modelos lineares generalizados à análises multivariadas) utilizando linguagem R.Antes de detalhar cada análise estatística, apresentaremos os comandos básicos para utilização da linguagem R e os tipos de distribuição estatística que são essenciais para compreensão dos testes estatísticos. Para isso, organizamos um esquema que chamamos de “estrutura lógica” que facilita compreensão dos passos necessários para testar suas hipóteses (veja Figura 3.2 Capítulo 3).","code":""},{"path":"cap2.html","id":"o-que-você-não-encontrará-neste-livro","chapter":"2 Introdução","heading":"2.3 O que você não encontrará neste livro","text":"Aprofundamento teórico, detalhes matemáticos, e explicação dos algoritmos são informações que infelizmente não serão abordadas neste livro. O foco aqui é explicação de como cada teste funciona (teoria e procedimentos matemáticos básicos) e sua aplicação em testes ecológicos usando scripts na linguagem R. Para tanto, o livro de Pierre e Louis Legendre (Legendre Legendre 2012) é uma leitura que permite o aprofundamento de cada uma das análises multivariadas propostas aqui. Além disso, são de fundamental importância para o amadurecimento em análises ecológicas seguintes leituras: Manly (1991), Pinheiro Bates (2000), Scheiner Gurevitch (2001), Burnham Anderson (2014), Quinn Keough (2002), Venables Ripley (2002), Magurran McGill (2011), N. J. Gotelli Ellison (2013), Zar (2010), Zuur, Ieno, Elphick (2009), Crawley (2012) e James et al. (2013).","code":""},{"path":"cap2.html","id":"por-que-usar-o-r","chapter":"2 Introdução","heading":"2.4 Por que usar o R?","text":"Os criadores R o chamam de uma linguagem e ambiente de programação estatística e gráfica (Venables Ripley 2002). linguagem R também é chamada de programação “orientada ao objeto” (object oriented programming), o que significa que utilizar o R envolve basicamente criação e manipulação de objetos em uma tela branca, em que o usuário tem de dizer exatamente o que deseja que o programa execute, ao invés de simplesmente clicar em botões. E vem daí uma das grandes vantagens em se usar o R: o usuário tem total controle sobre o que está acontecendo e também tem de compreender o que deseja antes de executar uma análise. Além disso, o R permite integração com outros programas escritos em C++, Python e Java, permitindo que os usuários possam aplicar novas metodologias sem ter que aprender novas linguagens.Na página pessoal Prof. Nicolas J. Gotelli (link), existem vários conselhos para um estudante iniciante de ecologia. Dentre esses conselhos, o Prof. Gotelli menciona que o domínio de uma linguagem de programação é uma das habilidades mais importantes, porque dá liberdade ao ecólogo para executar tarefas que vão além daquelas disponíveis em pacotes estatísticos comerciais. Além disso, maioria das novas análises propostas nos mais reconhecidos periódicos em ecologia normalmente são implementadas em linguagem R, e os autores incluem normalmente o código fonte material suplementar dos artigos, tornando análise acessível. partir momento que essas análises ficam disponíveis (seja por código fornecido pelo autor ou por implementação em pacotes pré-existentes), é mais simples entendermos lógica de análises complexas, especialmente multivariadas, utilizando nossos próprios dados, realizando-passo passo. Sem utilização R, normalmente temos que contatar os autores que nem sempre são tão acessíveis.Uma última vantagem é que por ser um software livre, citação R em artigos é permitida e até aconselhável. Para saber como citar o R, digite citation() na linha de comando. Para citar um pacote específico, digite citation() com o nome pacote entre aspas dentro dos parênteses. Neste ponto, esperamos ter convencido você leitor, de que aprender utilizar o R tem inúmeras vantagens. Entretanto, provavelmente vai ser difícil começo, mas continue e perceberá que o investimento vai valer à pena futuro.","code":""},{"path":"cap2.html","id":"indo-além-da-linguagem-de-progração-para-a-ecologia","chapter":"2 Introdução","heading":"2.5 Indo além da linguagem de progração para a Ecologia","text":"Um ponto em comum em que todos os autores deste livro concordaram em conversas durante sua estruturação, foi dificuldade que todos tivemos quando estávamos aprendendo linguagem:Como transcrever os objetivos (manipulação de dados, análises e gráficos) em linguagem RComo interpretar os resultados das análises estatísticas R para os objetivos ecológicosNum primeiro momento, quando estamos aprendendo linguagem R é muito desafiador pensar em como estruturar nossos códigos para que eles façam o que precisamos: importar dados, selecionar linhas ou colunas, qual pacote ou função usar para uma certa análise ou como fazer um gráfico que nas nossas anotações são simples, mas código parece impossível. Bem, não há um caminho fácil nesse sentido e ele depende muito da experiência e familiaridade adquirida com o tempo de uso da linguagem, assim como outra língua qualquer, como inglês ou espanhol. Entretanto, uma dica pode ajudar: estruture seus códigos antes de partir para o R. Num papel escreva os pontos que quer que seus códigos façam, como se estivesse explicando para alguém os passos que precisa para realizar tarefas. Depois disso, transcreva para o script (iremos explicar esse conceito @[cap4]) esse texto. Por fim, traduza isso em linguam R. Pode parecer massante e cansativo começo, mas isso o ajudará ter maior domínio da linguagem, sendo que esse passo se torna desnecessário quando se adquire bastante experiência.Uma vez transposta esse barreira inicial e temos os resultados de nossas análises (valores de estatísticas, parâmetros estimados, valores de p e R², etc.), com gráficos e outras figuras que precisamos, como interpretamos à luz da teoria ecológica? Esse ponto é talvez um dos mais complicados. Com o tempo, ter um valor final de uma estatística ou gráfico à partir da linaguagem R é relativamente simples, mas o que esse valor ou gráfico significam para nossa hipótese ecológica é o ponto mais complicado. Essa dificuldade por ser por inexperiência teórica (ainda não lemos muito sobre um aspecto ecológico) ou inexperiência científica (ainda temos dificuldade para expandir nossos argumentos de forma indutiva). Destacamos esse ponto porque ele é fundamental processo científico e talvez seja o principal aspecto que diferencia os cientistas de outros profissionais: sua capacidade de entendimento dos padrões à partir dos processos e mecanismos atrelados. Nesse ponto, quase sempre recorremos à nossos orientadores ou colegas mais experientes para nos ajudar, mas é natural e faz parte processo de aprendizado de uso da linguagem R junto à Ecologia como ciência. Entretanto, contrapomos importância dessa extrapolação para não nos tornarmos apenas especialistas em linguagem R sem fundamental capacidade de entendimento sistema ecológico que estamos estudando.","code":""},{"path":"cap2.html","id":"como-usar-este-livro","chapter":"2 Introdução","heading":"2.6 Como usar este livro","text":"Os conteúdos apresentados em cada capítulo são independentes entre si. Portanto, você pode utilizar este livro de duas formas. primeira é seguir uma ordem sequencial (capítulos 1, 2, 3, …) que recomendamos, principalmente, para pessoas que não possuem familiaridade com linguagem R. segunda forma, é selecionar o capítulo que contém análise de seu interesse e mudar de um capítulo para outro sem seguir sequência apresentada livro.Com exceção dos capítulos 3, 4, 5 e 15, os outros capítulos foram elaborados seguindo mesma estrutura contendo uma descrição da análise estatística (aspecto teóricos) e exemplos relacionados com questões ecólogicas que podem ser respondidas por esta análise. Todos os exemplos são compostos por: ) uma descrição dos dados utilizados, ii) pergunta e predição trabalho, iii) descrição das variáveis resposta(s) e preditora(s), e iv) descrição e explicação das linhas de comando R necessárias para realização das análises. Os exemplos utilizados são baseados em dados reais que já foram publicados em artigos científicos ou são dados coletados por um dos autores deste livro. Nós recomendamos que primeiro você utilize estes exemplos para se familiarizar com análises e formatação das linhas e colunas das planilhas. Em seguida, utilize seus próprios dados para realizar análises. Esta é melhor maneira de se familiarizar com linhas de comando R.Muitas das métricas ou índices apresentados neste livro não foram traduzidas para o português, porque seus acrônimos são clássicos e bem estabelecidos na literatura ecológica. Nestes casos, consideramos que tradução poderia confundir pessoas que estão começando se familiarizar com literatura específica. Realçamos que não estamos abordando todas possibilidades disponíveis, e existem muito outros pacotes e funções R que realizam mesmas análises. Contudo, esperamos que o conteúdo apresentado permita que os leitores adquiram independência e segurança, para que possam caminhar sozinhos na exploração de novos pacotes e funções para responderem suas perguntas biológicas e ecológicas.","code":""},{"path":"cap3.html","id":"cap3","chapter":"3 Voltando ao básico: como dominar a arte de fazer perguntas cientificamente relevantes","heading":"3 Voltando ao básico: como dominar a arte de fazer perguntas cientificamente relevantes","text":"Capítulo originalmente publicado por Gonçalves-Souza, Provete, Garey, Silva & Albuquerque (2019), Methods Techniques Ethnobiology Ethnoecology (tradução autorizada por Springer).","code":""},{"path":"cap3.html","id":"introdução-1","chapter":"3 Voltando ao básico: como dominar a arte de fazer perguntas cientificamente relevantes","heading":"3.1 Introdução","text":"Aquele que ama prática sem teoria é como um marinheiro que embarca em um barco sem um leme e uma bússola e nunca sabe onde pode atracar - Leonardo da Vinci.Qual é sua pergunta? Talvez esta seja frase que pesquisadores mais jovens ouvem quando começam suas atividades científicas. Apesar de aparentemente simples, responder esta pergunta se torna um dos maiores desafios da formação científica. Seja na pesquisa quantitativa ou qualitativa, todo processo de busca de conhecimento parte de uma questão/problema formulada pelo pesquisador início desse processo. Esta questão guiará o pesquisador em todas etapas da pesquisa. caso específico de pesquisa quantitativa, questão é porta de entrada de uma das formas mais poderosas de pensar cientificamente: o método hipotético-dedutivo (MHD) definido por Karl Popper (1959). Este capítulo propõe uma maneira de pensar sobre hipóteses (geradas dentro MHD) para melhorar o pensamento estatístico usando um fluxograma que relaciona variáveis por ligações causais. Além disso, argumentamos que você pode facilmente usar fluxogramas para (1) identificar variáveis relevantes e como elas afetam umas às outras; (2) melhorar (quando necessário) o desenho experimental/observacional; (3) facilitar escolha de análises estatísticas; e (4) melhorar interpretação e comunicação dos dados e análises.","code":""},{"path":"cap3.html","id":"perguntas-devem-preceder-as-análises-estatísticas","chapter":"3 Voltando ao básico: como dominar a arte de fazer perguntas cientificamente relevantes","heading":"3.2 Perguntas devem preceder as análises estatísticas","text":"","code":""},{"path":"cap3.html","id":"um-bestiário1-para-o-teste-de-hipóteses-você-está-fazendo-a-pergunta-certa","chapter":"3 Voltando ao básico: como dominar a arte de fazer perguntas cientificamente relevantes","heading":"3.2.1 Um bestiário1 para o teste de hipóteses (Você está fazendo a pergunta certa?)","text":"maioria dos alunos e professores de ciências biológicas possuem aversão à palavra “estatística.” Não surpreendentemente, enquanto maioria das disciplinas acadêmicas que compõem o “STEM” (termo em inglês para aglomerar Ciência, Tecnologia, Engenharia e Matemática) têm uma sólida formação estatística durante graduação, cursos de ciências biológicas têm um currículo fraco ao integrar o pensamento estatístico dentro de um contexto biológico (Metz 2008). Esses cursos têm sido frequentemente ministrados sem qualquer abordagem prática para integrar os alunos em uma plataforma de solução de problemas (Horgan et al. 1999). Infelizmente, Etnobiologia, Ecologia e Conservação (daqui em diante EEC) não são exceções. Talvez mais importante, uma grande preocupação durante o treinamento estatístico de estudantes de EEC é necessidade de trabalhar com problemas complexos e multidemensionais que exigem soluções analíticas ainda mais complicadas para um público sem experiência em estatística e matemática. Por este motivo, muitos pesquisadores consideram estatística como parte mais problemática de sua pesquisa científica. Argumentamos neste capítulo que dificuldade de usar estatística em EEC está associada à ausência de uma plataforma de solução de problemas gerando hipóteses claras que são derivadas de uma teoria. entanto, concordamos que há um grande desafio em algumas disciplinas como Etnobiologia para integrar esta abordagem direcionada por hipóteses, uma vez que foi introduzida apenas recentemente [veja Phillips Gentry (1993); phillips_useful_1993-1; U. P. Albuquerque Hanazaki (2009)]. Devido à falta de uma plataforma de solução de problemas, frequentemente percebemos que alunos/pesquisadores na EEC geralmente têm dificuldades de responder\nperguntas básicas para uma pesquisa científica, tais como:Qual é principal teoria ou raciocínio lógico seu estudo?Qual é questão principal seu estudo?Qual é sua hipótese? Quais são suas predições?Qual é unidade amostral, variável independente e dependente de seu trabalho? Existe alguma covariável?Qual é o grupo controle?Como selecionar qualquer teste estatístico sem responder essas cinco perguntas? estrutura estatística frequentista fornece uma maneira de ir progressivamente suportando ou falseando uma hipótese (Neyman Pearson 1933; Popper 1959). decisão de rejeitar uma hipótese nula é feita usando um valor de probabilidade (geralmente P < 0,05) calculado pela comparação de eventos observados com observações repetidas obtidas partir de uma distribuição nula.Agora, vamos ensinar através de um exemplo e apresentar um “guia para o pensamento estatístico” que conecta alguns elementos essenciais para executar qualquer análise multivariada (ou univariada) Underwood (1997). Primeiro, imagine que você observou os seguintes fenômenos na natureza: (1) “indivíduos de uma população tradicional selecionar algumas plantas para fins médicos” e (2)“manchas monodominantes da árvore Prosopis juliflora, uma espécie invasora em várias regiões.” lado da etnobiologia, para entender como e porque o conhecimento tradicional é construído, existe uma teoria ou hipótese (por exemplo, hipótese de aparência: Gonçalves, Albuquerque, Medeiros 2016) explicando os principais processos que ditam seleção da planta (Fig. 3.1a).Então, você pode fazer uma ou mais perguntas relacionadas àquele fenômeno observado (Fig. 3.1b). Por exemplo, como urbanização afeta o conhecimento das pessoas sobre o uso de plantas medicinais em diferentes biomas? lado ecológico/conservação, para entender por que espécies introduzidas afetam espécies nativas locais, você precisa entender teorias nicho ecológico e evolutiva (MacDougall, Gilbert, Levine 2009; Saul Jeschke 2015). Você pode perguntar, por exemplo, como plantas exóticas afetam estrutura de comunidades de plantas nativas? Questões complexas ou vagas dificultam construção fluxograma de pesquisa (ver descrição abaixo) e seleção de testes estatísticos. Em vez disso, uma pergunta útil deve indicar variáveis relevantes seu estudo, como independentes e dependentes, covariáveis, unidade de amostral e escala espacial de interesse (Fig. 3.1b). exemplo etnobiológico fornecido, urbanização e o conhecimento das pessoas são variáveis independentes e dependentes, respectivamente. Além disso, este estudo tem uma escala ampla, pois compara biomas diferentes. próxima etapa é construir hipótese biológica (Fig. 3.1c), que indicará associação entre variáveis independentes e dependentes. exemplo etnobiológico, hipótese é que (1) “urbanização afeta o conhecimento das pessoas sobre o uso de plantas medicinais,” enquanto hipótese ecológica é que (2) “espécies exóticas afetam estrutura de comunidades de plantas nativas.” Observe que isso é muito semelhante à questão principal. Mas você pode ter múltiplas hipóteses (Platt 1964) derivado de uma teoria. Depois de selecionar hipótese biológica (ou científica), é hora de pensar sobre derivação lógica da hipótese, que é chamada de predição ou previsão (Fig. 3.1d). Os padrões preditos são uma etapa muito importante, pois após defini-los você pode operacionalizar suas variáveis e visualizar seus dados. Por exemplo, variável teórica “Urbanização” pode ser medida como “grau de urbanização ao longo das áreas urbanas, periurbanas e rurais” e “conhecimento das pessoas” como “o número e tipo de espécies de plantas úteis usadas para diferentes doenças.” Assim, predição é que o grau de urbanização diminua o número e tipo de espécies de plantas conhecidas utilizadas para fins medicinais. exemplo ecológico, variável “espécies exóticas” pode ser medida como “densidade da planta exótica Prosopis juliflora” e “Estrutura da comunidade” como “riqueza e composição de espécies nativas.” Depois de operacionalizar o seu trabalho à luz método hipotético-dedutivo (HDM), o próximo passo é “pensar estatisticamente” sobre hipótese biológica formulada (ver Figura 3.1 e, f).\nFigure 3.1: Um guia para o pensamento estatístico combinando o método hipotético-dedutivo (– d, ) e estatística frequentista (e – ). Veja também Fig. 1 em Underwood 1997, Fig. 1 em Ford 2004 e Fig. 1.3 em Legendre & Legendre 2012.\nEntão, você precisa definir hipótese estatística nula (H0) e alternativa (H1). Duas “hipóteses estatísticas” diferentes podem ser derivadas de uma hipótese biológica (Fig. 3.1e). Portanto, nós usamos o termo “hipótese estatística” entre aspas, porque chamadas hipóteses estatísticas são predições sensu stricto, e muitas vezes confundem jovens estudantes. hipótese estatística nula representa uma ausência de relacão entre variáveis independentese e dependentes. Depois de definir hipótese estatística nula, você pode derivar uma ou várias hipóteses estatísticas alternativas, que demonstram (s) associação(ões) esperada(s) entre suas variáveis (Fig. 3.1e). Em nosso exemplo, hipótese nula é que “o grau de urbanização não afeta o número de espécies de plantas úteis conhecidas pela população local.” Por sua vez, hipótese alternativa é que “o grau de urbanização afeta o número de espécies de plantas úteis conhecidas pela população local.” Depois de operacionalizar suas variáveis e definir o valor nulo e hipóteses alternativas, é hora de visualizar o resultado esperado (Fig. 3.2, Caixa 1) e escolher um método estatístico adequado. Por exemplo, se você deseja comparar diferença na composição de plantas úteis entre áreas urbanas, periurbanas e rurais, você pode executar uma PERMANOVA (Gonçalves-Souza, Garey, et al. 2019) que usa uma estatística de teste chamada pseudo-F. Então, você deve escolher o limite de probabilidade (o valor P) teste estatístico para decidir se hipótese nula deve ou não deve ser rejeitada (Nicholas J. Gotelli Ellison 2012). Se você encontrar um P < 0,05, você deve rejeitar hipótese estatística nula (urbanização não afeta o número e composição das plantas). Por outro lado, um P > 0,05 indica que você não pode rejeitar hipótese nula estatística. Assim, estatística teste e o valor P representam última parte teste de hipótese estatística, que é decisão e conclusões apropriadas que serão usadas para retroalimentar teoria principal (Figura 3.1g – ). Generalizando seus resultados e falseando (ou não) suas hipóteses, o estudo busca refinar construção conceitual da teoria, que muda constantemente (Fig. 1i, Ford 2004). entanto, há um ponto crítico nesta última frase, porque significância estatística não significa necessariamente relevância biológica Martínez-Abraín (2008). Nas palavras de Ford (2004): “estatísticas são usadas para iluminar o problema, e não para apoiar uma posição.” Além disso, o procedimento de teste de hipótese tem alguma incerteza, que pode influenciar resultados “falso-positivos” (erro tipo 1) e “falso-negativos” (erro tipo 2) (Whitlock Schluter 2015). Para simplificar, não discutiremos em detalhes os prós e contras da estatística frequentista, bem como métodos alternativos (por exemplo, Bayesiano e Máxima Verossimilhança), e questões filosóficas relativas ao “valor P” (para uma discussão sobre esses tópicos, consulte o fórum em Ellison et al. 2014).Caixa 1. Tipo de variáveis e visualização de dados\nConforme descrito na Seção 3, o fluxograma é essencial para conectar variáveis relevantes para pesquisa. Para aproveitar ao máximo esta abordagem, você pode desenhar suas próprias predições gráficas para te ajudar pensar sobre diferentes possibilidades analíticas. Aqui, nós fornecemos uma descrição completa dos tipos de variáveis que você deve saber antes de executar qualquer análise estatística e representar seus resultados. Além disso, mostramos uma breve galeria (Fig. 3.2) com exemplos de boas práticas em visualização de dados (Fig. 3.3b, veja também figuras em Gonçalves-Souza, Garey, et al. 2019). Além de conectar diferentes variáveis fluxograma, você deve distinguir o tipo de variável. Primeiro você deve identificar variáveis independentes (também conhecidos como explicativas ou preditoras) e dependentes (também conhecidas como resposta). variável independente é aquela (ou aquelas) que prevê ou afeta variável resposta (por exemplo, fertilidade solo é variável independente capaz de afetar abundância de uma espécie de planta focal, variável dependente). Além disso, uma covariável é uma variável contínua que pode afetar tanto variável resposta quanto independente (ou ambos), mas geralmente não é interesse pesquisador. Depois de definir variáveis relevantes, conectando-fluxograma, é hora de diferenciar seu tipo: (1) quantitativa ou contínua, e (2) categórica ou qualitativa (Fig. 3.2a, Caixa 1). O tipo de variável irá definir que tipo de figura você pode selecionar. Por exemplo, se você está comparando duas variáveis contínuas ou uma variável contínua e uma binária, melhor maneira de visualizá-los (Fig. 3.2b) é um gráfico de dispersão (Fig. 3.2c, d). linha representa os valores preditos pelo modelo estatístico usado (por exemplo, linear, logístico). Se você está interessado em comparar gama de diferentes atributos (ou descrição de qualquer variável numérica) entre variáveis categóricas (por exemplo, espécies ou populações locais), um gráfico de halteres (inglês Dumbbell plot) é uma boa opção (Fig. 3.2e). Histogramas também podem ser usados para mostrar distribuição de duas variáveis contínuas de dois grupos ou fatores (Fig. 3.2f). entanto, se você quiser testar o efeito de uma variável categórica independente (como em um desenho de ANOVA) sobre uma variável dependente, boxplots (Fig. 3.2g) ou gráficos de violino podem resumir essas relações de maneira elegante. Conjuntos de dados multivariados, por sua vez, podem ser visualizados com ordenação (Fig. 3.2h) ou gráficos de agrupamento (não mostrados). Existe um site abrangente apresentando várias maneiras de visualizar dados chamado https://www.datavizproject.com/.\nFigure 3.2: () Tipos de variáveis e (B) visualização de dados para representar relação entre variáveis independentes e dependentes ou covariáveis.\n","code":""},{"path":"cap3.html","id":"fluxograma-conectando-variáveis-para-melhorar-o-desenho-experimental-e-as-análises-estatísticas","chapter":"3 Voltando ao básico: como dominar a arte de fazer perguntas cientificamente relevantes","heading":"3.3 Fluxograma: Conectando Variáveis para Melhorar o desenho experimental e as análises estatísticas","text":"McIntosh e Pontius (2017) afirmaram que o pensamento estatístico (representado na Fig. 3.1 inclui quatro etapas importantes: (1) quais perguntas você investigaria (Seção 4), (2) como e onde coletar os dados (Ruxton Colegrave 2016), (3) quais fatores devem ser considerados e como eles afetam suas variáveis de interesse (e como elas afetam umas às outras), e (4) qual análise estatística você deve usar e como interpretar e comunicar os resultados (Seção 4). entanto, etapa (3) deve ser feita antes de coletar os dados. Por exemplo, se você está interessado na investigação dos benefícios das matas ciliares para espécies nativas de peixes, quais variáveis devem ser incluídas estudo? Se você escolher rios com e sem mata ciliar como única variável preditora, seu projeto de amostragem irá omitir outras variáveis de confusão, como ordem rio e carbono orgânico solo montante. Vellend (2016) nomeou este problema como o “problema de três caixas” (ver também Ruxton Colegrave 2016) , que se refere à limitação em inferir que X (variável independente) causa variação em Y (variável depende) quando outras variáveis criam ou ampliam correlação entre X e Y (ver Fig. 2 em Ruxton Colegrave 2016). Uma ferramenta útil para compreender relação entre todas variáveis relevantes seu estudo é um fluxograma. “fluxograma de pesquisa” [ver também magnusson_statistics_2015] proposto aqui, variáveis dependentes (também conhecidas como resposta) e independentes (ou preditora), bem como covariáveis são representadas como caixas (com formas distintas: Fig. 3.3). Além disso, você pode usar uma seta para representar uma (possível) via causal indicando força e sinal (positivo ou negativo) da variável preditora na variável dependente (Fig. 3.3) Ao fazer isso, você pode melhorar o desenho experimental ou observacional incluindo ou controlando variáveis de confusão o que, por sua vez, pode ajudar separar contribuição relativa de diferentes variáveis preditoras em seu sistema. Mais importante, fazer conexões entre variáveis melhora sua capacidade de visualizar o “Quadro geral” de sua pesquisa, o que pode afetar seu experimento, análise estatística e revisão da literatura. Na verdade, Arlidge et al. (2017)argumentam que fluxogramas facilitam construção de narrativas, melhorando: (1) definição de múltiplas hipóteses, (2) coleta, interpretação e disseminação de dados e (3) comunicação conteúdo estudo. Você também pode ler o livro de Magnusson et al. (2015) para entender mais como usar fluxogramas para auxiliar análises estatísticas. Além disso, Ford (2004) recomenda o uso de uma abordagem analítica para fomentar o desenvolvimento da pesquisa. Além disso, o fluxograma de pesquisa pode ser usado como uma ferramenta forte para contemplar os conselhos de Ford (2004), que foram: (1) definir pergunta da pesquisa, (2) definir teoria ser usada, (3) definir técnica de investigação (por exemplo, experimento, observação de campo), (4) definir medições, (5) definir como fazer inferência, e (6) interpretar, generalizar,e sintetizar partir de dados que, por sua vez, são usados para refinar teoria e modificar (quando necessário) questões futuras (Fig. 3.1).\nFigure 3.3: Exemplo de como usar um fluxograma para melhorar o entendimento sistema estudado. pergunta teórica “Qual é o impacto da invasão na comunidade nativa e nas propriedades ecossistema?” pode gerar duas predições: (1) planta exótica Prosopis juliflora reduz diversidade beta de comunidades de plantas nativas, e (2) Prosopis juliflora modifica composição das comunidades de plantas e reduz o estoque de carbono e taxas de decomposição. Após selecionar suas predições, você pode construir um fluxograma conectando variáveis relevantes e associações entre elas. Além disso, você pode usar informações na Caixa 1 para identificar que tipo de variável você irá coletar e quais figuras podem ser usadas (b).\n","code":""},{"path":"cap3.html","id":"questões-fundamentais-em-etnobiologia-ecologia-e-conservação","chapter":"3 Voltando ao básico: como dominar a arte de fazer perguntas cientificamente relevantes","heading":"3.4 Questões fundamentais em etnobiologia, ecologia e conservação","text":"teorias são generalizações. teorias contêm perguntas. Para algumas teorias, perguntas são explícitas e representam o que teoria pretende explicar. Para outras, questões são implícitas e se relacionam com quantidade e tipo de generalização, dada escolha de métodos e exemplos usados por pesquisadores na construção da teoria. teorias mudam continuamente, à medida que exceções são encontradas às suas generalizações e como questões implícitas sobre método e opções de estudos são expostas. - E. David Ford (2004)Como argumentamos antes, uma questão relevante e testável precede análises estatísticas. Assim, apresentamos seguir 12 questões que podem estimular pesquisas futuras na ECC. Observe, entanto, que não queremos dizer que eles são únicas questões relevantes serem testadas na EEC (ver, por exemplo, Sutherland et al. (2013) para uma avaliação completa da pesquisa de ponta em Ecologia; e Caixa 6.1 em Pickett et al. (2007)2). Especificamente, essas questões são muito amplas e podem ser desenvolvidas em perguntas, hipóteses e predições mais restritas. Depois de cada questão teórica, apresentamos um estudo que testou essas hipóteses bem como variáveis relevantes que podem estimular estudos futuros.Como o uso da terra afeta manutenção da biodiversidade e distribuição de espécies em diferentes escalas espaciais?\nExemplo: Vários estudos em diferentes ecossistemas e escalas investigaram como o uso da terra afeta biodiversidade. entanto, destacamos um estudo comparando os efeitos globais uso da terra (por exemplo, densidade populacional humana, paisagem para usos humanos, tempo desde conversão da floresta) em espécies terrestres (por exemplo, mudança líquida na riqueza local, dissimilaridade composicional média) (Newbold et al. 2015).Como o uso da terra afeta manutenção da biodiversidade e distribuição de espécies em diferentes escalas espaciais?Exemplo: Vários estudos em diferentes ecossistemas e escalas investigaram como o uso da terra afeta biodiversidade. entanto, destacamos um estudo comparando os efeitos globais uso da terra (por exemplo, densidade populacional humana, paisagem para usos humanos, tempo desde conversão da floresta) em espécies terrestres (por exemplo, mudança líquida na riqueza local, dissimilaridade composicional média) (Newbold et al. 2015).Qual é o impacto da invasão biótica nas comunidades nativas e propriedades ecossistema?\nExemplo: Investigar como o estabelecimento de espécies exóticas afetam riqueza de espécies receptor, comunidades nativas, bem como como isso afeta entrega serviços ecossitêmicos. Estudos anteriores controlaram presença de espécies invasoras ou registros históricos comparados (estudos observacionais) dessas espécies e como elas impactam biodiversidade. Além disso, há algum esforço em compreender os preditores de invasibilidade (por exemplo, produto interno bruto de regiões, densidade populacional humana, litoral continental e ilhas) Dawson et al. (2017).Qual é o impacto da invasão biótica nas comunidades nativas e propriedades ecossistema?Exemplo: Investigar como o estabelecimento de espécies exóticas afetam riqueza de espécies receptor, comunidades nativas, bem como como isso afeta entrega serviços ecossitêmicos. Estudos anteriores controlaram presença de espécies invasoras ou registros históricos comparados (estudos observacionais) dessas espécies e como elas impactam biodiversidade. Além disso, há algum esforço em compreender os preditores de invasibilidade (por exemplo, produto interno bruto de regiões, densidade populacional humana, litoral continental e ilhas) Dawson et al. (2017).Como o declínio predador de topo afeta entrega de serviços ecossistêmicos?\nExemplo: Investigar como remoção de grandes carnívoros afeta o fornecimento de serviços ecossistêmicos, como o sequestro de carbono, doenças e controle de danos às colheitas. Estudos anteriores investigaram esta questão controlando presença de predadores de topo ou comparando registros históricos (estudo observacionais) de espécies e vários preditores (por exemplo, perda e fragmentação de habitat, conflito entre humanos e espécies caçadas, utilização para medicina tradicional e superexploração de presas) (Ripple et al. 2014).Como o declínio predador de topo afeta entrega de serviços ecossistêmicos?Exemplo: Investigar como remoção de grandes carnívoros afeta o fornecimento de serviços ecossistêmicos, como o sequestro de carbono, doenças e controle de danos às colheitas. Estudos anteriores investigaram esta questão controlando presença de predadores de topo ou comparando registros históricos (estudo observacionais) de espécies e vários preditores (por exemplo, perda e fragmentação de habitat, conflito entre humanos e espécies caçadas, utilização para medicina tradicional e superexploração de presas) (Ripple et al. 2014).Como acidificação dos oceanos afeta produtividade primária e teias alimentares em ecossistemas marinhos?\nExemplo: Estudos recentes testaram os efeitos individuais e interativos da acidificação e aquecimento oceano nas interações tróficas em uma teia alimentar. acidificação e o aquecimento foram manipulados pela mudança dos níveis de CO2 e temperatura, respectivamente. Estudos anteriores demonstraram que elevação de CO2 e temperatura aumentou produtividade primária e afetou força controle de cima para baixo exercido por predadores (Goldenberg et al. 2017).Como acidificação dos oceanos afeta produtividade primária e teias alimentares em ecossistemas marinhos?Exemplo: Estudos recentes testaram os efeitos individuais e interativos da acidificação e aquecimento oceano nas interações tróficas em uma teia alimentar. acidificação e o aquecimento foram manipulados pela mudança dos níveis de CO2 e temperatura, respectivamente. Estudos anteriores demonstraram que elevação de CO2 e temperatura aumentou produtividade primária e afetou força controle de cima para baixo exercido por predadores (Goldenberg et al. 2017).Como podemos reconciliar necessidades da sociedade por recursos naturais com conservação da Natureza?\nExemplo: Existe uma literatura crescente usando abordagens de paisagem para melhorar gestão da terra para reconciliar conservação e desenvolvimento econômico. Os estudos possuem diversos objetivos, mas em geral eles usaram o engajamento das partes interessadas, apoio institucional, estruturas eficazes de governança como variáveis preditoras e melhorias ambientais (por exemplo, conservação solo e da água, cobertura vegetal) e socioeconômicas (renda, capital social, saúde pública, emprego) como variáveis dependentes (Reed et al. 2017).Como podemos reconciliar necessidades da sociedade por recursos naturais com conservação da Natureza?Exemplo: Existe uma literatura crescente usando abordagens de paisagem para melhorar gestão da terra para reconciliar conservação e desenvolvimento econômico. Os estudos possuem diversos objetivos, mas em geral eles usaram o engajamento das partes interessadas, apoio institucional, estruturas eficazes de governança como variáveis preditoras e melhorias ambientais (por exemplo, conservação solo e da água, cobertura vegetal) e socioeconômicas (renda, capital social, saúde pública, emprego) como variáveis dependentes (Reed et al. 2017).Qual é o papel das áreas protegidas (UCs) para manutenção da biodiversidade e dos serviços ecossistêmicos?\nExemplo: Houve um trabalho considerável na última década comparando eficácia das UCs para conservação da biodiversidade. Embora esta questão não esteja completamente separada da questão anterior, o desenho dos estudos é relativamente distinto. Em geral, os pesquisadores contrastam o número de espécies e o fornecimento de serviços ecossistêmicos (por exemplo, retenção de água e solo, sequestro de carbono) entre áreas legalmente protegidas (UCs) e não protegidas (Xu et al. 2017).Qual é o papel das áreas protegidas (UCs) para manutenção da biodiversidade e dos serviços ecossistêmicos?Exemplo: Houve um trabalho considerável na última década comparando eficácia das UCs para conservação da biodiversidade. Embora esta questão não esteja completamente separada da questão anterior, o desenho dos estudos é relativamente distinto. Em geral, os pesquisadores contrastam o número de espécies e o fornecimento de serviços ecossistêmicos (por exemplo, retenção de água e solo, sequestro de carbono) entre áreas legalmente protegidas (UCs) e não protegidas (Xu et al. 2017).Como integrar o conhecimento científico e das pessoas locais para mitigar os impactos negativos das mudanças climáticas e uso da terra na biodiversidade?\nExemplo: Eventos climáticos extremos podem ter forte impacto sobre rendimento agrícola e produção de alimentos. Autores recentes têm argumentado que esse efeito pode ser mais forte para os pequenos agricultores. Estudos futuros podem investigar como precipitação e temperatura afetam o rendimento agrícola e como os agricultores tradicionais ou indígenas lidam com esse impacto negativo. Sistemas de agricultura tradicional têm menor erosão solo e emissões de N2O / CO2 que monoculturas e, portanto, podem ser vistos como uma atividade de mitigação viável em um mundo em constante mudança (Niggli et al. 2009; Altieri Nicholls 2017).Como integrar o conhecimento científico e das pessoas locais para mitigar os impactos negativos das mudanças climáticas e uso da terra na biodiversidade?Exemplo: Eventos climáticos extremos podem ter forte impacto sobre rendimento agrícola e produção de alimentos. Autores recentes têm argumentado que esse efeito pode ser mais forte para os pequenos agricultores. Estudos futuros podem investigar como precipitação e temperatura afetam o rendimento agrícola e como os agricultores tradicionais ou indígenas lidam com esse impacto negativo. Sistemas de agricultura tradicional têm menor erosão solo e emissões de N2O / CO2 que monoculturas e, portanto, podem ser vistos como uma atividade de mitigação viável em um mundo em constante mudança (Niggli et al. 2009; Altieri Nicholls 2017).Como mudanças climáticas afetam resiliência e estratégias adaptativas em sistemas socioecológicos?\nExemplo: mudança clima altera tanto pesca quanto agricultura em todo o mundo, o que por sua vez obriga os humanos mudar suas estratégias de cultivo. Estudos recentes têm argumentado que agricultura em alguns países enfrentará riscos com mudanças climáticas. Esses estudos comparam diferentes sistemas de produção, de agricultura convencional outros tipos empregados por populações locais. Por exemplo, há uma forte conexão entre (1) espécies ameaçadas e sobrepesca, (2) índice de desenvolvimento humano (IDH) e dependência média da pesca e aquicultura. Além disso, há evidências de que biodiversidade pode amortecer os impactos das mudanças climáticas aumentando resiliência da terra [Niggli et al. (2009); Altieri Nicholls (2017); blanchard_linked_2017]. Uma abordagem interessante é investigar como populações locais lidam com esses desafios em termos de percepções e comportamento.Como mudanças climáticas afetam resiliência e estratégias adaptativas em sistemas socioecológicos?Exemplo: mudança clima altera tanto pesca quanto agricultura em todo o mundo, o que por sua vez obriga os humanos mudar suas estratégias de cultivo. Estudos recentes têm argumentado que agricultura em alguns países enfrentará riscos com mudanças climáticas. Esses estudos comparam diferentes sistemas de produção, de agricultura convencional outros tipos empregados por populações locais. Por exemplo, há uma forte conexão entre (1) espécies ameaçadas e sobrepesca, (2) índice de desenvolvimento humano (IDH) e dependência média da pesca e aquicultura. Além disso, há evidências de que biodiversidade pode amortecer os impactos das mudanças climáticas aumentando resiliência da terra [Niggli et al. (2009); Altieri Nicholls (2017); blanchard_linked_2017]. Uma abordagem interessante é investigar como populações locais lidam com esses desafios em termos de percepções e comportamento.Como invasão biológica afeta espacial e temporalmente estrutura e funcionalidade dos sistemas sócio-ecológicos?\nExemplo: Muitos estudos demonstraram que espécies invasoras têm consequências biológicas, econômicas e sociais negativas. Aqui, da mesma forma que pergunta B, os pesquisadores controlaram presença de espécies invasoras ou utilizaram registros históricos. entanto, trabalhos recentes quantificam não apenas riqueza e composição de espécies nativas, mas também atributos funcionais de animais/vegetais que afetam diretamente o fornecimento de serviços ecossistêmicos como abastecimento (comida, água), regulação (clima, controle de inundações), suporte (ciclagem de nutrientes, formação solo) e cultural (ecoturismo, patrimônio cultural) (Chaffin et al. 2016). Mas, espécies invasoras podem provocar efeitos positivos sistema sócio-ecológico aumentando disponibilidade de recursos naturais, impactando como pessoas gerenciam e usam biodiversidade local.Como invasão biológica afeta espacial e temporalmente estrutura e funcionalidade dos sistemas sócio-ecológicos?Exemplo: Muitos estudos demonstraram que espécies invasoras têm consequências biológicas, econômicas e sociais negativas. Aqui, da mesma forma que pergunta B, os pesquisadores controlaram presença de espécies invasoras ou utilizaram registros históricos. entanto, trabalhos recentes quantificam não apenas riqueza e composição de espécies nativas, mas também atributos funcionais de animais/vegetais que afetam diretamente o fornecimento de serviços ecossistêmicos como abastecimento (comida, água), regulação (clima, controle de inundações), suporte (ciclagem de nutrientes, formação solo) e cultural (ecoturismo, patrimônio cultural) (Chaffin et al. 2016). Mas, espécies invasoras podem provocar efeitos positivos sistema sócio-ecológico aumentando disponibilidade de recursos naturais, impactando como pessoas gerenciam e usam biodiversidade local.Qual é relação entre diversidades filogenética e taxonômica com diversidade biocultural?\nExemplo: Estudos recentes mostraram que existe um padrão filogenético e taxonômico nos recursos que pessoas incorporam em seus sistemas sócio-ecológicos, especialmente em plantas medicinais. Existe uma tendência para pessoas, em diferentes partes mundo, para usar plantas próximas filogeneticamente para os mesmos propósitos. Aqui, os pesquisadores podem testar o quanto isso afeta diversidade de práticas em um sistema sócio-ecológico considerando o ambiente, bem como sua estrutura e funções [C. H. Saslis-Lagoudakis et al. (2012); saslis-lagoudakis_evolution_2014].Qual é relação entre diversidades filogenética e taxonômica com diversidade biocultural?Exemplo: Estudos recentes mostraram que existe um padrão filogenético e taxonômico nos recursos que pessoas incorporam em seus sistemas sócio-ecológicos, especialmente em plantas medicinais. Existe uma tendência para pessoas, em diferentes partes mundo, para usar plantas próximas filogeneticamente para os mesmos propósitos. Aqui, os pesquisadores podem testar o quanto isso afeta diversidade de práticas em um sistema sócio-ecológico considerando o ambiente, bem como sua estrutura e funções [C. H. Saslis-Lagoudakis et al. (2012); saslis-lagoudakis_evolution_2014].Quais variáveis ambientais e sócio-políticas mudam estrutura e funcionalidade dos sistemas sócio-ecológicos tropicais?\nExemplo: Testar influência das mudanças ambientais afetadas pela espécie humana (por exemplo, fogo, exploração madeireira, aquecimento) em espécies-chave e, consequentemente, como esse efeito em cascata pode afetar outras espécies e serviços ecossistêmicos (por exemplo, armazenamento de carbono, ciclo da água e dinâmica fogo) (Lindenmayer Sato 2018).Quais variáveis ambientais e sócio-políticas mudam estrutura e funcionalidade dos sistemas sócio-ecológicos tropicais?Exemplo: Testar influência das mudanças ambientais afetadas pela espécie humana (por exemplo, fogo, exploração madeireira, aquecimento) em espécies-chave e, consequentemente, como esse efeito em cascata pode afetar outras espécies e serviços ecossistêmicos (por exemplo, armazenamento de carbono, ciclo da água e dinâmica fogo) (Lindenmayer Sato 2018).Os atributos das espécies influenciam como populações locais distinguem plantas ou animais úteis e não-úteis?\nExemplo: Investigar se população local possui preferência ao selecionar espécies de animais ou plantas. Você pode avaliar se grupos diferentes (por exemplo, turistas) ou populações locais (por exemplo, pescadores) selecionam espécies com base em atributos das espécies. Estudos recentes têm mostrado uma ligação potencial entre planta (por exemplo, cor, folha, floração) e pássaro (por exemplo, cor, vocalzação) e alguns serviços culturais ecossistema, como estética, recreativa e espiritual/religiosa (Goodness et al. 2016).Os atributos das espécies influenciam como populações locais distinguem plantas ou animais úteis e não-úteis?Exemplo: Investigar se população local possui preferência ao selecionar espécies de animais ou plantas. Você pode avaliar se grupos diferentes (por exemplo, turistas) ou populações locais (por exemplo, pescadores) selecionam espécies com base em atributos das espécies. Estudos recentes têm mostrado uma ligação potencial entre planta (por exemplo, cor, folha, floração) e pássaro (por exemplo, cor, vocalzação) e alguns serviços culturais ecossistema, como estética, recreativa e espiritual/religiosa (Goodness et al. 2016).Como você notou, questões eram mais teóricas e, consequentemente, você pode derivar prediões testáveis (usando variáveis) partir delas (Figuras 1 e 3). Por exemplo, da questão “Como o uso da terra afeta manutenção da biodiversidade e distribuição de espécies em diferentes escalas?” podemos derivar duas predições diferentes: (1) densidade populacional (variável operacional de uso da terra) muda composição de espécies e reduz riqueza de espécies na escala da paisagem (predição derivada da hipótese da homogeneização biótica: Solar et al. 2015); (2) composição dos atributos funcionais das plantas é diferente em remanescentes florestais com diferentes matrizes (cana-de-açúcar, gado, cidade, etc.).","code":""},{"path":"cap3.html","id":"considerações-finais","chapter":"3 Voltando ao básico: como dominar a arte de fazer perguntas cientificamente relevantes","heading":"3.5 Considerações Finais","text":"Conte-seus segredosE faça-suas perguntasOh, vamos voltar para o inícioCorrendo em círculos, perseguindo caudasCabeças em uma ciência à parteNinguém disse que seria fácil(…) Desfazendo enígmasQuestões da ciência, ciência e progresso- O Cientista, ColdplayEste é um trecho de uma música da banda britânica de rock Coldplay, álbum de 2002 Rush Blood Head. letra é uma comparação incrível entre ciência e os altos e baixos de um relacionamento fadado ao fracaço. banda traz uma mensagem surpreendentemente clara de que como cientistas, nós (deveríamos) frequentemente fazer perguntas, voltar ao início após descobrir que estávamos errados (ou não) e que corremos em círculos tentando melhorar nosso conhecimento. banda descreveu de uma forma tão precisa o quão cíclico (mas não repetitivo) é o método científico. Como disse canção: não é fácil, mas aprender como fazer boas perguntas é um passo essencial para consolidação conhecimento. Ao incluir o teste de hipótese EEC, podemos ser mais precisos. Definitivamente, isso não significa que ciência descritiva seja inútil. Ao contrário, o desenvolvimento da ECC e principalmente da Etnobiologia, foi construído sobre uma linha de frente descritiva, o que significa que foi valioso para fundação da Etnobiologia como disciplina consolidada [Group (2003); stepp_advances_2005]. entanto, estudos recentes defendem que etnobiologia deve dialogar com disciplinas com maior respaldo teórico, como ecologia e biologia evolutiva para melhorar pesquisa sobre biodiversidade (U. P. Albuquerque Ferreira Júnior 2017). Por sua vez, incorporando o conhecimento local em ecologia e evolução irá certamente refinar seu próprio desenvolvimento, que em última análise beneficia conservação biológica (C. Haris Saslis-Lagoudakis Clarke 2013). Além disso, há uma necessidade urgente de formar jovens pesquisadores em filosofia e metodologia da ciência, bem como comunicação e produção científica (U. Albuquerque P. 2013). Como comentário final, acreditamos que formação dos alunos em EEC precisa de uma reavaliação que necessariamente volta aos conceitos e métodos básicos. Assim, os pesquisadores podem combinar o método hipotético-dedutivo com pensamento estatístico usando um fluxograma de pesquisa para ir além da descrição básica.","code":""},{"path":"cap3.html","id":"referências","chapter":"3 Voltando ao básico: como dominar a arte de fazer perguntas cientificamente relevantes","heading":"3.6 Referências","text":"","code":""},{"path":"cap4.html","id":"cap4","chapter":"4 Introdução ao R","heading":"4 Introdução ao R","text":"","code":""},{"path":"cap4.html","id":"pré-requisitos-do-capítulo","chapter":"4 Introdução ao R","heading":"Pré-requisitos do capítulo","text":"Pacotes e dados que serão utilizados nesse capítulo.","code":"\n## Pacotes\nlibrary(ecodados)## Loading required package: ggplot2\nlibrary(devtools)## Loading required package: usethis\nlibrary(knitr)"},{"path":"cap4.html","id":"contextualização","chapter":"4 Introdução ao R","heading":"4.1 Contextualização","text":"O objetivo desta seção é apresentar os aspectos básicos da linguagem R para que qualquer pessoa possa realizar os principais passos para análise de dados utilizando essa linguagem. Abordaremos aqui questões básicas sobre linguagem R, como: 1) R e RStudio, 2) funcionamento da linguagem, 3) estrutura e manipulação de objetos, 4) exercícios e 5) principais livros e material para se aprofundar nos seus estudos.Todo processo de aprendizagem torna-se mais efetivo quando teoria é combinada com prática, então recomendamos fortemente que você leitor() acompanhe os códigos e exercícios deste livro, ao mesmo tempo que os executa em seu computador e não só os leia passivamente. Além disso, se você tiver seus próprios dados é muito importante tentar executar replicar análises ou gráficos. Por motivos de espaço, não abordaremos todas questões relacionadas ao uso da linguagem R nesta seção. Logo, aconselhamos que você consulte o material sugerido final desta seção para se aprofundar.Este capítulo, na maioria das vezes, pode desestimular pessoas que estão iniciando, uma vez que ele não apresenta os códigos para realizar análises estatísticas. Contudo, ele é essencial para o entendimento e interpretação que está sendo informado nas linhas de código, além de facilitar manipulação dos dados antes de realizar análises estatísticas. leitora ou leitor vai perceber que não usará este capítulo para fazer análises, mas voltará neste capítulo diversas vezes para relembrar qual é o código ou que significa determinada expressão ou objeto usados nos próximos capítulos.","code":""},{"path":"cap4.html","id":"r-e-rstudio","chapter":"4 Introdução ao R","heading":"4.2 R e RStudio","text":"Com o R, é possível manipular, analisar e visualizar dados, além de escrever desde pequenas linhas de códigos até programas inteiros. O R é versão em código aberto de uma linguagem de programação criada por John M. Chambers (Stanford University, CA, EUA) nos anos 1980 Bell Labs, chamada de S, que contou com três versões: Old S (1976-1987), New S (1988-1997) e S4 (1998), utilizada na IDE S-PLUS (1988-2008). Essa linguagem tornou-se bastante popular e vários produtos comerciais que usam estão disponíveis, como o S-PLUS, SPSS, STATA e SAS.final dos anos 1990, Robert Gentleman e Ross Ihaka (ambos da Universidade de Auckland, Nova Zelândia), iniciaram o desenvolvimento da versão free da linguagem S, com o seguinte histórico: Desenvolvimento (1997-2000), Versão 1 (2000-2004), Versão 2 (2004-2013), Versão 3 (2013-2020) e Versão 4 (2020). Para mais detalhes histórico de desenvolvimento das linguagens S e R, consultar Wickham (2013). Atualmente linguagem R é mantida por uma rede de colaboradores denominada R Core Team. origem nome R é desconhecida, mas reza lenda que ao lançarem o nome da linguagem os autores se valeram da letra que vinha antes S, uma vez que linguagem R foi baseada nela e utilizaram letra “R.” Outra história conta que pelo fato nome dos dois autores iniciarem por “R,” batizaram linguagem com essa letra.Um aspecto digno de nota é que linguagem R é uma linguagem interpretada, ao contrário de outras linguagens como Fortran e C que são compiladas. Isso faz ser mais fácil de programar, pois processa linhas de comando e transforma em linguagem de máquina (código binário que o computador efetivamente lê), apesar desse fato diminuir velocidade de processamento.Para começarmos trabalhar com o R é necessário baixá-lo na página R Project. Então, acesse esse site, e em seguida, clique link download R, que o levará à página CRAN Mirrors (Comprehensive R Archive Network). Escolha página espelho Brasil mais próxima de você para baixar o programa. Escolha agora o sistema operacional seu computador (passos adicionais existem para diferentes distribuições Linux), para Windows, clique em base para finalmente chegar à página de download com versão mais recente R.Reserve algum tempo para explorar esta página R-Project. Existem vários livros dedicados diversos assuntos baseados R. Além disso, estão disponíveis manuais em diversas línguas para serem baixados gratuitamente.Como o R é um software livre, não existe possibilidade de o usuário entrar em contato com um serviço de suporte de usuários, muito comuns em softwares pagos. Ao invés disso, existem várias listas de emails que fornecem suporte à comunidade de usuários. Nós, particularmente, recomendamos o ingresso nas seguintes listas: R-help, R-sig-ecology, e R-br. Este último reúne um grupo de pessoas usuárias brasileiras programa R.Apesar de podemos utilizar o R com o IDE (Ambiente de Desenvolvimento Integrado - Integrated Development Environment) RGui que vem com instalação da linguagem para usuários Windows (Figura 4.1) ou próprio terminal para usuários Linux e MacOS, existem alguns IDEs específicos para facilitar nosso uso dessa linguagem.\nFigure 4.1: Interface RGui. Os números indicam: (1) R Script, (2) R Console, e (3) R Graphics.\nDessa forma, nesse livro todo, nós que escrevemos utilizamos o RStudio e assumimos que você que está lendo fará o mesmo.O RStudio permite diversas personalizações, grande parte delas contidas em Tools > Global options. Incentivamos leitoras e leitores “fuçar,” com certa dose de cuidado, nas opções para customização. Dentre essas mudanças, destacamos duas:Tools > Global options > Appearance > Editor theme para escolher um tema para seu RStudioTools > Global options > Code > [X] Soft-wrap R source files com essa opção habilitada, quando escrevemos comentários longos ou mudamos largura da janela que estamos trabalhando, todo o texto e o código se ajustam janela automaticamenteUm último ponto importante: para evitar possíveis erros é importante instalar primeiro o software que possui linguagem R e depois o IDE RStudio.","code":""},{"path":"cap4.html","id":"funcionamento-da-linguagem-r","chapter":"4 Introdução ao R","heading":"4.3 Funcionamento da linguagem R","text":"Nesta seção, veremos os principais conceitos para entender como linguagem R funciona ou como geralmente utilizamos o IDE RStudio dia dia, para executar nossas rotinas utilizando linguagem R. Veremos então: 1) console, 2) script, 3) operadores, 4) objetos, 5) funções, 6) pacotes, 7) ajuda (help), 8) ambiente (environment/workspace), 9) citações e 10) principais erros.Antes de iniciarmos o uso R pelo RStudio é fundamental entendermos alguns pontos sobre janelas e o funcionamento delas RStudio (Figura 4.2).\nFigure 4.2: Interface RStudio. Os números indicam: (1) janela com abas de Script, R Markdown, dentre outras; (2) janela com abas de Console, Terminal e Jobs; (3) janela com abas de Environment, History, Conections e Tutorial; e (4) janela com abas de Files, Plots, Packages, Help e Viewer.\nDetalhando algumas dessas janelas e abas, temos:Console: painel onde os códigos são rodados e vemos saídasEditor/Script: painel onde escrevemos nossos códigos em R, R Markdown ou outro formatoEnvironment: painel com todos os objetos criados na sessãoHistory: painel com o histórico dos códigos rodadosFiles: painel que mostra os arquivos diretório de trabalhoPlots: painel onde os gráficos são apresentadosPackages: painel que lista os pacotesHelp: painel onde documentação das funções é exibidaNo RStudio, alguns atalhos são fundamentais para aumentar nossa produtividade:F1: abre o painel de Help quando digitado em cima de uma funçãoCtrl + Enter: roda linha de código selecionada scriptCtrl + Shift + N: abre um novo scriptCtrl + S: salva um scriptCtrl + Z: desfaz uma operaçãoCtrl + Shift + Z: refaz uma operaçãoAlt + -: insere um sinal de atribuição (<-)Ctrl + Shift + M: insere um operador pipe (%>%)Ctrl + Shift + C: comenta uma linha script - insere um (#)Ctrl + Shift + R: insere uma sessão (# ———————-)Ctrl + Shift + H: abre uma janela para selecionar o diretório de trabalhoCtrl + Shift + F10: reinicia o consoleCtrl + L: limpa os códigos consoleAlt + Shift + K: abre uma janela com todos os atalhos disponíveis","code":""},{"path":"cap4.html","id":"console","chapter":"4 Introdução ao R","heading":"4.3.1 Console","text":"O console é onde versão da linguagem R instalada é carregada para executar os códigos da linguagem R (Figura 4.2 (2)). Na janela console aparecerá o símbolo > seguida de uma barra vertical | que fica piscando, onde digitaremos ou enviaremos nossos códigos script. Podemos fazer um pequeno exercício: vamos digitar 10 + 2, seguido da tecla Enter para que essa operação seja executada.O resultado retorna o valor 12, precedido de um valor entre colchetes. Esses colchetes demonstram posição elemento numa sequência de valores. Se fizermos essa outra operação 1:42, o R vai criar uma sequência unitária de valores de 1 42. depender da largura da janela console, vai aparecer um número diferente entre colchetes indicando sua posição na sequência: antes 1 vai aparecer o [1], depois quando sequência quebrada, vai aparecer o número correspondente da posição elemento, por exemplo, [26].Podemos ver o histórico dos códigos executados Console na aba History (Figura 4.2 (3)).","code":"\n10 + 2## [1] 12\n1:42##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42"},{"path":"cap4.html","id":"scripts","chapter":"4 Introdução ao R","heading":"4.3.2 Scripts","text":"Scripts são rascunhos dos códigos e onde de fato os códigos são escritos e depois enviados ao console (Figura 4.2 (1)). Scripts são arquivos de texto simples, criados com extensão (terminação) .R (ative visualização da extensão de arquivos para ver). Para criar um script, basta ir em File > New File > R Script, ou clicando ícone logo abaixo de File, ou ainda usando o atalho Ctrl + Shift + N.Também é possível usar outro editor de códigos, como o bloco de notas .txt, Sublime Text, Notepad++ e similares. Os códigos podem ser escritos nesses editores e depois salvos com extensão .R que ao ser aberto RStudio irão ser executados normalmente.Uma vez escrito os códigos script podemos rodar esses códigos de duas formas: 1) todo o script de uma vez, clicando em Source ou usando o atalho Ctrl + Shift + Enter; ou 2) apenas linha onde o cursor estiver posicionado, independente de sua posição naquela linha, clicando em Run ou usando o atalho Ctrl + Enter.Devemos sempre salvar nossos scripts, tomando por via de regra: primeiro criar o arquivo e depois ir salvando nesse mesmo arquivo cada passo de desenvolvimento das análises (não é raro o R fechar sozinho e você perder algum tempo de trabalho…). Há diversos motivos para criar um script: continuar o desenvolvimento mesmo em outro momento ou em outro computador, preservar trabalhos passados, ou ainda compartilhar seus códigos com outra pessoa. Para criar ou salvar um script basta ir em File > Save, escolher um diretório e nome para o script e salvar. Podemos ainda utilizar o atalho Ctrl + S.Em relação aos scripts, ainda há os comentários, representados pelos símbolos # (hash) ou #' (hash-linha). diferença entre eles é que para o segundo, quando precionamos tecla Enter o comentário #' é inserido automaticamente na linha seguinte. Linhas de códigos script contendo comentários em seu início não são lidos pelo console R. Se o comentário estiver final da linha, essa linha de código ainda será lida. Os comentários são utilizados geralmente para: 1) descrever informações sobre dados ou funções e/ou 2) suprimir linhas de código.É interessante ter início de cada script um cabeçalho identificando o objetivo ou análise, autor e data para facilitar o compartilhamento e reprodutibilidade. Os comentários podem ser inseridos ou retirados das linhas com o atalho: Ctrl + Shift + C.Além disso, podemos usar comentários para adicionar informações sobre os códigos.Por fim, outro ponto fundamental é ter boas práticas de estilo de código. Quanto mais organizado e padronizado estiver os scripts, mais fácil de entendê-los e de procurar possíveis erros. Existem dois guias de boas práticas para adequar seus scripts: Hadley Wickham e Google.Ainda temos os Code Snippets (Fragmentos de código), que são macros de texto usadas para inserir rapidamente fragmentos comuns de código. Por exemplo, o snippet fun insere uma definição de função R. Para mais detalhes, ler o artigo RStudio: link.Uma aplicação bem interessante dos Code Snippets script é o ts. Basta digitar esse código e em seguida completar um tecla Tab para inserir rapidamente data e horário atuais script em forma de comentário.","code":"\n#' ---\n#' Título: Capítulo 04 - Introdução ao R\n#' Autor: Maurício Vancine\n#' Data: 20-05-2021\n#' ---\n## Comentários\n# O R nao lê a linha do código depois do # (hash).\n42 # Essas palavras não são executadas, apenas o 42, a resposta para questão fundamental da vida, o universo e tudo mais.## [1] 42\n# fun {snippet}\nfun\nname <- function(variables) {\n    \n}\n# ts {snippet}\n# Mon Jul 26 11:25:03 2021 ------------------------------"},{"path":"cap4.html","id":"operadores","chapter":"4 Introdução ao R","heading":"4.3.3 Operadores","text":"R, temos cinco tipos de operadores: aritméticos, relacionais, lógicos, atribuição e diversos. Grande parte deles são descritos na Tabela 4.1.Table 4.1: Operadores R.Como exemplo, podemos fazer operações simples usando os operadores aritméticos.Precisamos ficar atentos à prioridade dos operadores aritméticos:PRIORITÁRIO () > ^ > * ou / > + ou - NÃO PRIORITÁRIOVeja exemplo abaixo como o uso dos parênteses muda o resultado.","code":"\n## Operações aritméticas\n10 + 2 # adição## [1] 12\n10 * 2 # multiplicação## [1] 20\n## Sem especificar a ordem\n# Segue a ordem dos operadores.\n1 * 2 + 2 / 2 ^ 2## [1] 2.5\n## Especificando a ordem\n# Segue a ordem dos parenteses.\n((1 * 2) + (2 / 2)) ^ 2## [1] 9"},{"path":"cap4.html","id":"objetos","chapter":"4 Introdução ao R","heading":"4.3.4 Objetos","text":"Objetos são palavras às quais são atribuídos dados. atribuição possibilita manipulação de dados ou resultados de análises. Utilizaremos os símbolos < (menor), seguido de - (menos), sem espaço, dessa forma <-. Também podemos utilizar o símbolo de igual (=), mas não recomendamos, por não fazer parte das boas práticas de escrita de códigos em R. Podemos inserir essa combinação de símbolos com o atalho Alt + -. Para demonstrar, vamos atribuir o valor 10 à palavra obj_10, e chamar esse objeto novamente para verificar seu conteúdo.Todos os objetos criados numa sessão R ficam listados na aba Environment (Figura 4.2 (3)). Além disso, o RStudio possui função autocomplete, ou seja, podemos digitar primeiras letras de um objeto (ou função) e em seguida apertar Tab para que o RStudio liste tudo que começar com essas letras.Dois pontos importantes sobre atribuições: primeiro, o R sobrescreve os valores dos objetos com o mesmo nome, deixando o objeto com o valor da segunda atribuição.Segundo, o R tem limitações ao nomear objetos:nome de objetos só podem começar por letras (-z ou -Z) ou pontos (.)nome de objetos só podem conter letras (-z ou -Z), números (0-9), underscores (_) ou pontos (.)R é case-sensitive, .e., ele reconhece letras maiúsculas como diferentes de letras minúscula. Assim, um objeto chamado “resposta” é diferente objeto “RESPOSTA”devemos evitar acentos ou cedilha (ç) para facilitar memorização dos objetos e também para evitar erros de encoding/codificação de caracteresnome de objetos não podem ser iguais nomes especiais, reservados para programação (break, else, FALSE, , function, , Inf, NA, NaN, next, repeat, return, TRUE, )Podemos ainda utilizar objetos para fazer operações e criar objetos. Isso pode parecer um pouco confuso para os iniciantes na linguagem, mas é fundamental aprender essa lógica para passar para os próximos passos.","code":"\n## Atribuição - símbolo (<-)\nobj_10 <- 10\nobj_10## [1] 10\n## Sobrescreve o valor dos objetos\nobj <- 100\nobj## [1] 100\n## O objeto 'obj' agora vale 2\nobj <- 2\nobj## [1] 2\n## Definir dois objetos\nva1 <- 10\nva2 <- 2\n\n## Operações com objetos e atribuicão\nadi <- va1 + va2\nadi## [1] 12"},{"path":"cap4.html","id":"funções","chapter":"4 Introdução ao R","heading":"4.3.5 Funções","text":"Funções são códigos preparados para realizar uma tarefa específica de modo simples. Outra forma de entender uma função é: códigos que realizam operações em argumentos. estrutura de uma função é muito similar à sintaxe usada em planilhas eletrônicas, sendo composta por:nome_da_função(argumento1, argumento2, …)Nome da função: remete ao que ela fazParênteses: limitam funçãoArgumentos: valores, parâmetros ou expressões onde função atuaráVírgulas: separam os argumentosOs argumentos de uma função podem ser de dois tipos:Valores ou objetos: função alterará os valores em si ou os valores atribuídos aos objetosParâmetros: valores fixos que informam um método ou realização de uma operação. Informa-se o nome desse argumento, seguido de “=” e um número, texto ou TRUE ou FALSEAlguns exemplos de argumentos como valores ou objetos.Alguns exemplos de argumentos como parâmetros. Note que apesar valor argumento ser o mesmo (10), seu efeito resultado muda drasticamente. Aqui também é importante destacar um ponto: 1) podemos informar os argumentos sequencialmente, sem explicitar seus nomes, ou 2) independente da ordem, mas explicitando seus nomes. Entretanto, como exemplo abaixo, devemos informar o nome argumento (.e., parâmetro), para que seu efeito seja o que desejamos.Um ponto fundamental, e que deve ser entendido nesse ponto, é o fluxo de atribuições resultado da operação de funções novos objetos. desenvolvimento de qualquer script na linguagem R, grande parte da estrutura mesmo será dessa forma: atribuição de dados > operações com funções > atribuição dos resultados novos objetos > operações com funções desses novos objetos > atribuição dos resultados novos objetos… Ao entender esse funcionamento, começamos entender como devemos pensar na organização nosso script para montar análises que precisamos.Por fim, é fundamental também entender origem das funções que usamos R. Todas funções são advindas de pacotes. Esses pacotes possuem duas origens.pacotes já instalados por padrão e que são carregados quando abrimos o R (R Base)pacotes que instalamos e carregamos com funções","code":"\n## Funções - argumentos como valores\nsum(10, 2)## [1] 12\n## Funções - argumentos como objetos\nsum(va1, va2)## [1] 12\n## Funções - argumentos como parâmetros\n## Repetição - repete todos os elementos\nrep(x = 1:5, times = 10)##  [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3\n## [39] 4 5 1 2 3 4 5 1 2 3 4 5\n## Repetição - repete cada um dos elementos\nrep(x = 1:5, each = 10)##  [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4\n## [39] 4 4 5 5 5 5 5 5 5 5 5 5\n## Atribuicão dos resultados\n## Repetição\nrep_times <- rep(1:5, times = 10)\nrep_times##  [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3\n## [39] 4 5 1 2 3 4 5 1 2 3 4 5\n## Somar e atribuir\nrep_times_soma <- sum(rep_times)\nrep_times_soma## [1] 150\n## Raiz e atribuir\nrep_times_soma_raiz <- sqrt(rep_times_soma)\nrep_times_soma_raiz## [1] 12.24745"},{"path":"cap4.html","id":"pacotes-1","chapter":"4 Introdução ao R","heading":"4.3.6 Pacotes","text":"Pacotes são conjuntos extras de funções para executar tarefas específicas, além R Base. Existe literalmente milhares de pacotes para mais diversas tarefas: estatística, ecologia, geografia, sensoriamento remoto, econometria, ciências sociais, gráficos, machine learning, etc. Podemos verificar este vasto conjunto de pacotes pelo link que lista por nome os pacotes oficiais, ou seja, que passaram pelo crivo CRAN. Existem ainda muito mais pacotes em desenvolvimento, geralmente disponibilizados em repositórios GitHub ou GitLab.Primeiramente, com uma sessão R sem carregar nenhum pacote extra, podemos verificar pacotes carregados pelo R Base utilizando função search().Podemos ainda verificar todos pacotes instalados em seu computador com função library().R, quando tratamos de pacotes, devemos destacar diferença de dois conceitos: instalar um pacote e carregar um pacote. instalação de pacotes possui algumas características:Instala-se um pacote apenas uma vezPrecisamos estar conectados à internetO nome pacote precisa estar entre aspas na funçãoFunção (CRAN): install.packages()Vamos instalar o pacote vegan diretamente CRAN, que possui funções para realizar uma série de análise em ecologia. Para isso, podemos ir em Tools > Install Packages..., ou ir na aba Packages (Figura 4.2 (4)), procurar o pacote e simplesmente clicar em “Install.” Podemos ainda utilizar função install.packages().Podemos conferir em que diretórios um pacote será instalado com função .libPaths().Uma vez instalado um pacote, não há necessidade de instalá-lo novamente. Entretanto, todas vezes que iniciarmos uma sessão R, precisamos carregar os pacotes com funções que precisamos utilizar. O carregamento de pacotes possui algumas características:Carrega-se o pacote toda vez que se abre uma nova sessão RNão precisamos estar conectados à internetO nome pacote não precisa estar entre aspas na funçãoFunções: library() ou require()Vamos carregar o pacote vegan que instalamos anteriormente. Podemos ir na aba Packages (Figura 4.2 (4)) e “ticar” o pacote que queremos carregar ou utilizar função library().Como dissemos, alguns pacotes em desenvolvimento encontram-se disponíveis em repositórios GitHub ou GitLab. Para instalar pacotes GitHub, por exemplo, precisamos instalar e carregar o pacote devtools.Uma vez instalado e carregado esse pacote, podemos instalar o pacote GitHub, utilizando função devtools::install_github(). Precisamos atentar para usar essa forma “nome_usuario/nome_repositorio,” retirados link repositório de interesse. Como exemplo, podemos instalar o mesmo pacote vegan repositório GitHub vegandevs/vegan, e depois utilizar função library() para carregá-lo normalmente.Pode ser que em algumas circunstâncias iremos precisar instalar pacotes com versões específicas para algumas análises. forma mais simples de fazer isso é instalar um pacote partir de um arquivo compactado .tar.gz. Para isso podemos ir à base CRAN e realizar o download: https://cran.r-project.org/src/contrib/Archive/. Para exemplificar, vamos instalar o pacote vegan 2.4.0.maioria dos pacotes vem com bancos de dados que podem ser acessados pela função data(). Esses bancos de dados podem ser usados para testar funções pacote. Se estiver com dúvida na maneira como você deve preparar planilha para realizar uma análise específica, entre help da função e veja os conjuntos de dados que estão exemplo desta função. Como exemplo, vamos carregar os dados dune pacote vegan.Se por algum motivo precisarmos desinstalar um pacote, podemos utilizar função remove.packages(). Já para descarregar um pacote de uma sessão R, podemos usar função detach().E um último ponto fundamental sobre pacotes, diz respeito à atualização dos mesmos. Os pacotes são atualizados com frequência, e infelizmente ou felizmente (pois atualizações podem oferecer algumas quebras entre pacotes), não se atualizam sozinhos. Muitas vezes, instalação de um pacote pode depender da versão dos pacotes dependentes, e geralmente uma janela se abre perguntando se você quer que todos os pacotes dependentes sejam atualizados. Podemos ir na aba Packages (Figura 4.2 (4)) e clicar em “Update” ou usar função update.packages(checkBuilt = TRUE, ask = FALSE) para atualizá-los, entretanto, essa é uma função que costuma demorar muito para terminar de ser executada.Para fazer atualização dos pacotes instalados pelo GitHub, recomendamos o uso pacote dtupdate.Destacamos e incentivamos ainda uma prática que achamos interessante para aumentar reprodutibilidade de nossos códigos e scripts: de chamar funções de pacotes carregados dessa forma pacote::função(). Dessa forma, deixamos claro o pacote em que função está implementada. Destacamos aqui o exemplo de como instalar pacotes GitHub pacote devtools.","code":"\n## Verificar pacotes carregados\nsearch()\n## Verificar pacotes instalados\nlibrary()\n## Instalar pacotes\ninstall.packages(\"vegan\")\n## Diretórios de intalação dos pacotes\n.libPaths()## [1] \"C:/Users/pater/Documents/R/win-library/4.0\"\n## [2] \"C:/Program Files/R/R-4.0.5/library\"\n## Carregar pacotes\nlibrary(vegan)## Loading required package: permute## \n## Attaching package: 'permute'## The following object is masked from 'package:devtools':\n## \n##     check## Loading required package: lattice## This is vegan 2.5-7\n## Instalar pacote devtools\ninstall.packages(\"devtools\")\n\n## Carregar pacote devtools\nlibrary(devtools)\n## Instalar pacote do github\ndevtools::install_github(\"vegandevs/vegan\")\n\n## Carregar pacote do github\nlibrary(\"vegan\")\n## Download do arquivo .tar.gz\ndownload.file(url = \"https://cran.r-project.org/src/contrib/Archive/vegan/vegan_2.4-0.tar.gz\",\n              destfile = \"vegan_2.4-0.tar.gz\", mode = \"wb\")\n\n## Instalar o pacote vegan 2.4.0\ninstall.packages(\"vegan_2.4-0.tar.gz\", repos = NULL, type = \"source\")\n## Carregar dados de um pacote\nlibrary(vegan)\ndata(dune)\ndune[1:6, 1:6]##   Achimill Agrostol Airaprae Alopgeni Anthodor Bellpere\n## 1        1        0        0        0        0        0\n## 2        3        0        0        2        0        3\n## 3        0        4        0        7        0        2\n## 4        0        8        0        2        0        2\n## 5        2        0        0        0        4        2\n## 6        2        0        0        0        3        0\n## Descarregar um pacote\ndetach(\"package:vegan\", unload = TRUE)\n## Atualização dos pacotes\nupdate.packages(checkBuilt = TRUE, ask = FALSE)\n## Atualização dos pacotes instalados pelo GitHub\ndtupdate::github_update(auto.install = TRUE, ask = FALSE)\n## Pacote seguido da função implementada daquele pacote\ndevtools::install_github()"},{"path":"cap4.html","id":"ajuda-help","chapter":"4 Introdução ao R","heading":"4.3.7 Ajuda (Help)","text":"Um importante passo para melhorar usabilidade e ter mais familiaridade com linguagem R é aprender usar ajuda de cada função. Para tanto, podemos utilizar função help() ou o operador ?, depois de ter carregado o pacote, para abrir uma nova aba (Figura 4.2 (4)) que possui diversas informações sobre função de interesse. O arquivo de ajuda R possui geralmente nove ou dez tópicos, que nos auxiliam muito entendimento dos dados de entrada, argumentos e que operações estão sendo realizadas.Description: resumo da funçãoUsage: como utilizar função e quais os seus argumentosArguments: detalha os argumentos e como os mesmos devem ser especificadosDetails: detalhes importantes para se usar funçãoValue: mostra como interpretar saída (output) da função (os resultados)Note: notas gerais sobre funçãoAuthors: autores da funçãoReferences: referências bibliográficas para os métodos usados para construção da funçãoSee also: funções relacionadasExamples: exemplos uso da função. Às vezes pode ser útil copiar esse trecho e colar R para ver como funciona e como usar função.Vamos realizar um exemplo, buscando o help da função aov(), que realiza uma análise de variância.Além das funções, podemos buscar detalhes de um pacote em específico, para uma página simples help utilizando função help() ou o operador ?. Entretanto, para uma opção que ofereça uma descrição detalhada e um índice de todas funções pacote, podemos utilizar função library(), mas agora utilizando o argumento help, indicando o pacote de interesse entre aspas.Outra ferramenta de busca é página rseek, na qual é possível buscar por um termo não só nos pacotes R, mas também em listas de emails, manuais, páginas na internet e livros sobre o programa.","code":"\n## Ajuda\nhelp(aov)\n?aov\n## Ajuda do pacote\nhelp(vegan)\n?vegan\n\n## Help detalhado\nlibrary(help = \"vegan\")"},{"path":"cap4.html","id":"ambiente-environment","chapter":"4 Introdução ao R","heading":"4.3.8 Ambiente (Environment)","text":"O ambiente Environment como vimos é onde os objetos criados são armazenados. É fundamental entender que um objeto é uma alocação de um pequeno espaço na memória RAM seu computador, onde o R armazenará um valor ou o resultado de uma função, utilizando o nome que definimos na atribuição. Sendo assim, se fizermos uma atribuição de um objeto maior que o tamanho da memória RAM, esse objeto não será alocado, e atribuição não funcionará. Existem opções para contornar esse tipo de limitação, mas não abordaremos aqui. Entretanto, podemos utilizar função object.size() para saber quanto espaço nosso objeto criado está alocando de memória RAM.Podemos listar todos os objetos criados com função ls() ou objects().Podemos ainda remover objetos criados com função rm() ou remove(). Ou ainda fazer uma função composta para remover todos os objetos Environment.Quando usamos função ls() agora, nenhum objeto é listado.Toda vez que fechamos o R os objetos criados são apagados Environment. Dessa forma, em algumas ocasiões, por exemplo, análises estatísticas que demoram um grande tempo para serem realizadas, pode ser interessante exportar alguns ou todos os objetos criados.Para salvar todos os objetos, ou seja, todo o workspace, podemos ir em Session -> Save Workspace ... e escolher o nome arquivo workspace, por exemplo, “meu_workspace.RData.” Podemos ainda utilizar funções para essas tarefas. função save.image() salva todo workspace com extensão .RData.Depois disso, podemos fechar o RStudio tranquilamente, e quando formos trabalhar novamente, podemos carregar os objetos criados indo em Session -> Load Workspace... ou utilizando função load().Entretanto, em algumas ocasiões, não precisamos salvar todos os objetos. Dessa forma, podemos salvar apenas alguns objetos específicos usando função save(), também com extensão .RData.Ou ainda podemos salvar apenas um objeto com extensão .rds. Para isso, usamos funções saveRDS() e readRDS(), para exportar e importar esses dados, respectivamente.","code":"\n## Tamanho de um objeto\nobject.size(adi)## 56 bytes\n## Listar todos os objetos\nls()## [1] \"adi\"                 \"dune\"                \"obj\"                \n## [4] \"obj_10\"              \"rep_times\"           \"rep_times_soma\"     \n## [7] \"rep_times_soma_raiz\" \"va1\"                 \"va2\"\n## Remover um objeto\nrm(adi)\n\n## Remover todos os objetos criados\nrm(list = ls())\n## Listar todos os objetos\nls()## character(0)\n## Salvar todo o workspace\nsave.image(file = \"meu_workspace.RData\")\n## Carregar todo o workspace\nload(\"meu_workspace.RData\")\n## Salvar apenas um objeto\nsave(obj1, file = \"meu_obj.RData\")\n\n## Salvar apenas um objeto\nsave(obj1, obj2, file = \"meus_objs.RData\")\n\n## Carregar os objetos\nload(\"meus_objs.RData\")\n## Salvar um objeto para um arquivo\nsaveRDS(obj, file = \"meu_obj.rds\")\n\n## Carregar esse objeto\nreadRDS(file = \"meu_obj.rds\")"},{"path":"cap4.html","id":"citações","chapter":"4 Introdução ao R","heading":"4.3.9 Citações","text":"Ao utilizar o R para realizar alguma análise em nossos estudos, é fundamental citação mesmo. Para saber como citar exatamente o R em artigos, existe uma função denominada citation(), que provê um formato genérico de citação e um BibTeX para arquivos LaTeX e R Markdown.resultado dessa função, há uma mensagem muito interessante: “See also ‘citation(“pkgname”)’ citing R packages.” Dessa forma, aconselhamos os usuários de R citar também os pacotes que utilizaram em suas análises para dar os devidos créditos aos desenvolvedores das funções implementadas nos pacotes. Como exemplo, vamos ver como fica citação pacote vegan.Podemos ainda utilizar função write_bib() pacote knitr para exportar citação pacote formato .bib.","code":"\n## Citação do R\ncitation()## \n## To cite R in publications use:\n## \n##   R Core Team (2021). R: A language and environment for statistical\n##   computing. R Foundation for Statistical Computing, Vienna, Austria.\n##   URL https://www.R-project.org/.\n## \n## A BibTeX entry for LaTeX users is\n## \n##   @Manual{,\n##     title = {R: A Language and Environment for Statistical Computing},\n##     author = {{R Core Team}},\n##     organization = {R Foundation for Statistical Computing},\n##     address = {Vienna, Austria},\n##     year = {2021},\n##     url = {https://www.R-project.org/},\n##   }\n## \n## We have invested a lot of time and effort in creating R, please cite it\n## when using it for data analysis. See also 'citation(\"pkgname\")' for\n## citing R packages.\n## Citação do pacote vegan\ncitation(\"vegan\")## \n## To cite package 'vegan' in publications use:\n## \n##   Jari Oksanen, F. Guillaume Blanchet, Michael Friendly, Roeland Kindt,\n##   Pierre Legendre, Dan McGlinn, Peter R. Minchin, R. B. O'Hara, Gavin\n##   L. Simpson, Peter Solymos, M. Henry H. Stevens, Eduard Szoecs and\n##   Helene Wagner (2020). vegan: Community Ecology Package. R package\n##   version 2.5-7. https://CRAN.R-project.org/package=vegan\n## \n## A BibTeX entry for LaTeX users is\n## \n##   @Manual{,\n##     title = {vegan: Community Ecology Package},\n##     author = {Jari Oksanen and F. Guillaume Blanchet and Michael Friendly and Roeland Kindt and Pierre Legendre and Dan McGlinn and Peter R. Minchin and R. B. O'Hara and Gavin L. Simpson and Peter Solymos and M. Henry H. Stevens and Eduard Szoecs and Helene Wagner},\n##     year = {2020},\n##     note = {R package version 2.5-7},\n##     url = {https://CRAN.R-project.org/package=vegan},\n##   }\n## \n## ATTENTION: This citation information has been auto-generated from the\n## package DESCRIPTION file and may need manual editing, see\n## 'help(\"citation\")'.\n## Exportar uma citação em formato .bib\nknitr::write_bib(\"vegan\", file = \"vegan_ex.bib\")"},{"path":"cap4.html","id":"principais-erros-de-iniciantes","chapter":"4 Introdução ao R","heading":"4.3.10 Principais erros de iniciantes","text":"Errar quando está começando usar o R é muito comum e faz parte aprendizado. Entretanto, os erros nunca devem ser encarados como uma forma de desestímulo para continuar tentando. Todos nós, autores desse livro, e provavelmente usuários mais ou menos experientes, já passaram por um momento em que se quer desistir de tudo. Jovem aprendiz de R, única diferença entre você que está iniciando agora e nós que usamos há mais tempo são horas mais de uso (e raiva). O que temos mais é experiência para olhar o erro, lê-lo e conseguir interpretar o que está errado e saber buscar ajuda.Dessa forma, o ponto mais importante de quem está iniciando é ter paciência, calma, bom humor, ler e entender mensagens de erros. Listaremos aqui o que consideramos os principais erros dos iniciantes R.1. Esquecer de completar uma função ou bloco de códigosEsquecer de completar uma função ou bloco de códigos é algo bem comum. Geralmente esquecemos de fechar aspas \"\" ou parênteses (), mas felizmente geralmente o R nos informa isso, indicando um símbolo de +.2. Esquecer da vírgulaOutro erro bastante comum é esquecer de acrescentar vírgula , para separar argumentos dentro de uma função, principalmente se estamos compondo várias funções acopladas, .e., uma função dentro da outra.3. Chamar um objeto erradoPode parecer simples, mas esse é de longe o erro mais comum que pessoas iniciantes comentem. Quando temos um longo script, é de se esperar que tenhamos atribuído diversos objetos e em algum momento atribuímos um nome qual não lembramos. Dessa forma, quando chamamos o objeto ele não existe e devolve um erro. Entretanto, esse tipo de erro pode ser facilmente identificado, como o exemplo abaixo.4. Esquecer de carregar um pacoteEsse também é um erro recorrente, mesmo para usuários mais experientes. Em scripts de análises complexas, que requerem vários pacotes, geralmente esquecemos de um ou outro… melhor forma de evitar esse tipo de erro é listar os pacotes que vamos precisar usar logo início script.Geralmente mensagem de erro será de que função não foi encontrada ou algo nesse sentido. Carregando o pacote, esse erro é contornado.5. Usar o nome da função de forma errôneaEsse erro não é tão comum, mas pode ser incômodo às vezes. Algumas funções possuem nomes padrão “Camel Case,” .e., com letras maiúsculas para meio nome da função. Isso às vezes pode confundir, ou ainda, funções podem ou não ser separadas com ., como row.names() e rownames(). Capítulo de tidyverse ??, veremos que houve uma tentativa de padronização nos nomes das funções para “Snake Case,” .e, todas funções possuem letras minúsculas, com palavras separadas por underscore _.6. Atentar para o diretório corretoMuitas vezes o erro é simplesmente porque o usuário() não definiu o diretório correto onde está o arquivo ser importado. Por isso é fundamental sempre verificar se o diretório foi definido corretamente, geralmente com funções dir() ou list.files() para listar console lista de arquivos diretório. Podemos ainda usar o argumento pattern para listar arquivos por um padrão textual.Além disso, é fundamental ressaltar importância de verificar se o nome arquivo que importaremos foi digitado corretamente, atentando-se também para extensão: .csv, .txt, .xlsx, etc.","code":"sum(1, 2\n  +## Error: <text>:3:0: unexpected end of input\n## 1: sum(1, 2\n## 2:   +\n##   ^sum(1 2)## Error: <text>:1:7: unexpected numeric constant\n## 1: sum(1 2\n##           ^\nobj <- 10\nOBJ## Error in eval(expr, envir, enclos): object 'OBJ' not found\n## Carregar dados\ndata(dune)## Warning in data(dune): data set 'dune' not found\n## Função do pacote vegan\ndecostand(dune, \"hell\")## Error in decostand(dune, \"hell\"): could not find function \"decostand\"\n## Carregar o pacote\nlibrary(vegan)## This is vegan 2.5-7\n## Carregar dados\ndata(dune)\n\n## Função do pacote vegan\ndecostand(dune[1:6, 1:6], \"hell\")##    Achimill  Agrostol Airaprae  Alopgeni  Anthodor  Bellpere\n## 1 1.0000000 0.0000000        0 0.0000000 0.0000000 0.0000000\n## 2 0.6123724 0.0000000        0 0.5000000 0.0000000 0.6123724\n## 3 0.0000000 0.5547002        0 0.7337994 0.0000000 0.3922323\n## 4 0.0000000 0.8164966        0 0.4082483 0.0000000 0.4082483\n## 5 0.5000000 0.0000000        0 0.0000000 0.7071068 0.5000000\n## 6 0.6324555 0.0000000        0 0.0000000 0.7745967 0.0000000\n## Soma das colunas\ncolsums(dune)## Error in colsums(dune): could not find function \"colsums\"\n## Soma das colunas\ncolSums(dune)## Achimill Agrostol Airaprae Alopgeni Anthodor Bellpere Bromhord Chenalbu \n##       16       48        5       36       21       13       15        1 \n## Cirsarve Comapalu Eleopalu Elymrepe Empenigr Hyporadi Juncarti Juncbufo \n##        2        4       25       26        2        9       18       13 \n## Lolipere Planlanc  Poaprat  Poatriv Ranuflam Rumeacet Sagiproc Salirepe \n##       58       26       48       63       14       18       20       11 \n## Scorautu Trifprat Trifrepe Vicilath Bracruta Callcusp \n##       54        9       47        4       49       10\n## Listar os arquivos do diretório definido\ndir()\nlist.files()\n\n## Listar os arquivos do diretório definido por um padrão\ndir(pattern = \".csv\")"},{"path":"cap4.html","id":"estrutura-e-manipulação-de-objetos","chapter":"4 Introdução ao R","heading":"4.4 Estrutura e manipulação de objetos","text":"O conhecimento sobre estrutura e manipulação de objetos é fundamental para ter domínio e entendimento funcionamento da linguagem R. Nesta seção, trataremos da estrutura e manipulação de dados R, que ficou conhecido como modo R Base, em contrapartida ao tidyverse, tópico Capítulo ??. Abordaremos aqui temas chaves: 1) atributos de objetos, 2) manipulação de objetos unidimensionais e multidimensionais, 3) valores faltantes e especiais, 4) diretório de trabalho, e 5) importar, conferir e exportar dados.","code":""},{"path":"cap4.html","id":"atributo-dos-objetos","chapter":"4 Introdução ao R","heading":"4.4.1 Atributo dos objetos","text":"Quando fazemos atribuições de dados R (<-), os objetos gerados possuem três características.Nome: palavra que o R reconhece os dados atribuídosConteúdo: dados em siAtributos: modos (natureza) e estruturas (organização) dos elementosVamos explorar mais fundo os modos e estruturas dos objetos. Vale ressaltar que isso é uma simplificação, pois há muitas classes de objetos, como funções e saídas de funções que possuem outros atributos.Podemos verificar os atributos dos objetos com função attributes().","code":"\n## Atributos\nattributes(dune)## $names\n##  [1] \"Achimill\" \"Agrostol\" \"Airaprae\" \"Alopgeni\" \"Anthodor\" \"Bellpere\"\n##  [7] \"Bromhord\" \"Chenalbu\" \"Cirsarve\" \"Comapalu\" \"Eleopalu\" \"Elymrepe\"\n## [13] \"Empenigr\" \"Hyporadi\" \"Juncarti\" \"Juncbufo\" \"Lolipere\" \"Planlanc\"\n## [19] \"Poaprat\"  \"Poatriv\"  \"Ranuflam\" \"Rumeacet\" \"Sagiproc\" \"Salirepe\"\n## [25] \"Scorautu\" \"Trifprat\" \"Trifrepe\" \"Vicilath\" \"Bracruta\" \"Callcusp\"\n## \n## $row.names\n##  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\"\n## [16] \"16\" \"17\" \"18\" \"19\" \"20\"\n## \n## $class\n## [1] \"data.frame\""},{"path":"cap4.html","id":"modo-dos-objetos","chapter":"4 Introdução ao R","heading":"4.4.1.1 Modo dos objetos","text":"depender da natureza dos elementos que compõem os dados e que foram atribuídos aos objetos, esses objetos podem ser, de forma simples um dos cinco modos: numérico tipo inteiro (integer), numérico tipo flutuante (double), texto (character), lógico (logical) ou complexo (complex).atribuição de números R podem gerar dois tipos de modos: integer para números inteiros e double para números flutuantes ou com decimais.título de praticidade, ambos são incorporados como o modo numeric, com o tipo double, menos que especifiquemos que seja inteiro com letra L depois número.Além de números, podemos atribuir textos, utilizando para isso aspas \"\".Em algumas situações, precisamos indicar ocorrência ou não de um evento ou operação. Para isso, utilizamos palavras reservadas (TRUE e FALSE), chamadas de variáveis booleanas, pois assumem apenas duas possibilidades: 0 ou 1. Devemos nos ater para o fato dessas palavras serem escritas com letras maiúsculas e sem aspas.Por fim, existe um modo pouco utilizado que cria números complexos (raiz de números negativos).Podemos verificar o modo dos objetos ou fazer conversão entre esses modos com diversas funções.","code":"\n## Numérico double\nobj_numerico_double <- 1\n\n## Modo\nmode(obj_numerico_double)## [1] \"numeric\"\n## Tipo\ntypeof(obj_numerico_double)## [1] \"double\"\n## Numérico integer\nobj_numerico_inteiro <- 1L\n\n## Modo\nmode(obj_numerico_inteiro)## [1] \"numeric\"\n## Tipo\ntypeof(obj_numerico_inteiro)## [1] \"integer\"\n## Caracter ou string\nobj_caracter <- \"a\" # atencao para as aspas\n\n## Modo\nmode(obj_caracter)## [1] \"character\"\n## Lógico\nobj_logico <- TRUE # maiusculas e sem aspas\n\n## Modo\nmode(obj_logico)## [1] \"logical\"\n## Complexo\nobj_complexo <- 1+1i\n\n## Modo\nmode(obj_complexo)## [1] \"complex\"\n## Verificar o modo dos objetos\nis.numeric()\nis.integer()\nis.character()\nis.logical()\nis.complex()\n\n## Conversões entre modos\nas.numeric()\nas.integer()\nas.character()\nas.logical()\nas.complex()"},{"path":"cap4.html","id":"estrutura-dos-objetos","chapter":"4 Introdução ao R","heading":"4.4.1.2 Estrutura dos objetos","text":"Uma vez entendido natureza dos modos dos elementos dos objetos R, podemos passar para o passo seguinte e entender como esses elementos são estruturados dentro dos objetos.Essa estruturação irá nos contar sobre organização dos elementos, com relação aos modos e dimensionalidade da disposição dos elementos (Figura 4.3). De modo bem simples, os elementos podem ser estruturados em cinco tipos:Vetores e fatores: homogêneo (um modo) e unidimensional (uma dimensão). Um tipo especial de vetor são os fatores, usados para designar variáveis categóricasMatrizes: homogêneo (um modo) e bidimensional (duas dimensões)Arrays: homogêneo (um modo) e multidimensional (mais de duas dimensões)Data frames: heterogêneo (mais de um modo) e bidimensional (duas dimensões)Listas: heterogêneo (mais de um modo) e unidimensional (uma dimensão)\nFigure 4.3: Estruturas de dados mais comuns de R: vetores, matrizes, arrays, listas e data frames. Adaptado de: Grolemund (2014).\n","code":""},{"path":"cap4.html","id":"vetor","chapter":"4 Introdução ao R","heading":"4.4.1.2.1 Vetor","text":"Vetores representam o encadeamento de elementos numa sequência unidimensional. Capítulo 3, vimos o conceito de variável aleatória e seus tipos. R, essas variáveis podem ser operacionalizadas como vetores. Dessa forma, essa estrutura de dados pode ser traduzida como medidas de uma variável numérica (discretas ou contínuas), variável binária (booleana - TRUE e FALSE) ou descrição (informações em texto).Há diversas formas de se criar um vetor R:Concatenando elementos com função c()Criando sequências unitárias : ou com função seq()Criando repetições com função rep()“Colar” palavras com uma sequência numérica com função paste() ou paste0()Amostrando aleatoriamente elementos com função sample()Como os vetores são homogêneos, .e., só comportam um modo, quando combinamos mais de um modo mesmo objeto ocorre uma dominância de modos. Existe, dessa forma, uma coerção dos elementos combinados para que todos fiquem iguais. Essa dominância segue essa ordem:DOMINANTE character > double > integer > logical RECESSIVOAlém disso, podemos utilizar conversões listadas anteriormente para alterar os modos. Vamos exemplificar combinando os vetores criados anteriormente e convertendo-os.","code":"\n## Concatenar elementos numéricos\nconcatenar <- c(15, 18, 20, 22, 18)\nconcatenar## [1] 15 18 20 22 18\n## Sequência unitária (x1:x2)\nsequencia <- 1:10\nsequencia##  [1]  1  2  3  4  5  6  7  8  9 10\n## Sequência com diferentes espaçamentos \nsequencia_esp <- seq(from = 0, to = 100, by = 10) \nsequencia_esp##  [1]   0  10  20  30  40  50  60  70  80  90 100\n## Repetição\nrepeticao <- rep(x = c(TRUE, FALSE), times = 5)\nrepeticao##  [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\n## Cola palavra e sequência numérica\ncolar <- paste(\"amostra\", 1:5)\ncolar## [1] \"amostra 1\" \"amostra 2\" \"amostra 3\" \"amostra 4\" \"amostra 5\"\n## Amostragem aleatória\namostragem <- sample(x = 1:100, size = 10)\namostragem##  [1] 57 27 56  2 83 75 39  1 49 90\n## Coerção\nc(colar, amostragem)##  [1] \"amostra 1\" \"amostra 2\" \"amostra 3\" \"amostra 4\" \"amostra 5\" \"57\"       \n##  [7] \"27\"        \"56\"        \"2\"         \"83\"        \"75\"        \"39\"       \n## [13] \"1\"         \"49\"        \"90\"\n## Conversão\nas.numeric(repeticao)##  [1] 1 0 1 0 1 0 1 0 1 0"},{"path":"cap4.html","id":"fator","chapter":"4 Introdução ao R","heading":"4.4.1.2.2 Fator","text":"O fator representa medidas de uma variável categórica, podendo ser nominal ou ordinal. É fundamental destacar que fatores R devem ser entendidos como um vetor de integer, .e., ele é composto por números inteiros representando os níveis da variável categórica.Para criar um fator R usamos uma função específica factor(), na qual podemos especificar os níveis com o argumento level, ou fazemos uma conversão usando função .factor(). Trabalhar com fatores R Base não é das tarefas mais agradáveis, sendo assim, Capítulo ?? usamos versão tidyverse usando o pacote forcats.","code":"\n## Fator nominal\nfator_nominal <- factor(x = sample(x = c(\"floresta\", \"pastagem\", \"cerrado\"), \n                                   size = 20, replace = TRUE),\n                        levels = c(\"floresta\", \"pastagem\", \"cerrado\"))\nfator_nominal##  [1] cerrado  floresta cerrado  cerrado  cerrado  pastagem floresta pastagem\n##  [9] floresta pastagem cerrado  floresta pastagem pastagem cerrado  floresta\n## [17] cerrado  pastagem cerrado  floresta\n## Levels: floresta pastagem cerrado\n## Fator ordinal\nfator_ordinal <- factor(x = sample(x = c(\"baixa\", \"media\", \"alta\"), \n                                   size = 20, replace = TRUE),\n                        levels = c(\"baixa\", \"media\", \"alta\"), ordered = TRUE)\nfator_ordinal##  [1] baixa media alta  media baixa baixa alta  baixa alta  alta  media alta \n## [13] alta  media alta  alta  baixa media baixa baixa\n## Levels: baixa < media < alta\n## Conversão\nfator <- as.factor(x = sample(x = c(\"floresta\", \"pastagem\", \"cerrado\"), \n                              size = 20, replace = TRUE))\nfator##  [1] cerrado  pastagem pastagem pastagem cerrado  cerrado  floresta floresta\n##  [9] pastagem cerrado  cerrado  pastagem floresta cerrado  pastagem cerrado \n## [17] pastagem pastagem cerrado  pastagem\n## Levels: cerrado floresta pastagem"},{"path":"cap4.html","id":"matriz","chapter":"4 Introdução ao R","heading":"4.4.1.2.3 Matriz","text":"matriz representa dados formato de tabela, com linhas e colunas. linhas representam unidades amostrais (locais, transectos, parcelas) e colunas representam variáveis numéricas (discretas ou contínuas), variáveis binárias (TRUE ou FALSE) ou descrições (informações em texto).Podemos criar matrizes R de duas formas. primeira delas dispondo elementos de um vetor em um certo número de linhas e colunas com função matrix(), podendo preencher essa matriz com os elementos vetor por linhas ou por colunas alterando o argumento byrow.segundo forma, combinando vetores, utilizando função rbind() para combinar vetores por linha, .e., vetor embaixo outro, e cbind() para combinar vetores por coluna, .e., vetor ao lado outro.","code":"\n## Vetor\nve <- 1:12\n\n## Matrix - preenchimento por linhas - horizontal\nma_row <- matrix(data = ve, nrow = 4, ncol = 3, byrow = TRUE)\nma_row##      [,1] [,2] [,3]\n## [1,]    1    2    3\n## [2,]    4    5    6\n## [3,]    7    8    9\n## [4,]   10   11   12\n## Matrix - preenchimento por colunas - vertical\nma_col <- matrix(data = ve, nrow = 4, ncol = 3, byrow = FALSE)\nma_col##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n## Criar dois vetores\nvec_1 <- c(1, 2, 3)\nvec_2 <- c(4, 5, 6)\n\n## Combinar por linhas - vertical - um embaixo do outro\nma_rbind <- rbind(vec_1, vec_2)\nma_rbind##       [,1] [,2] [,3]\n## vec_1    1    2    3\n## vec_2    4    5    6\n## Combinar por colunas - horizontal - um ao lado do outro\nma_cbind <- cbind(vec_1, vec_2)\nma_cbind##      vec_1 vec_2\n## [1,]     1     4\n## [2,]     2     5\n## [3,]     3     6"},{"path":"cap4.html","id":"array","chapter":"4 Introdução ao R","heading":"4.4.1.2.4 Array","text":"O array representa combinação de tabelas, com linhas, colunas e dimensões. Essa combinação pode ser feita em múltiplas dimensões, mas apesar disso, geralmente é mais comum o uso em Ecologia para três dimensões, por exemplo: linhas (unidades amostrais), colunas (espécies) e dimensão (tempo). Isso gera um “cubo mágico” ou “cartas de um baralho,” onde podemos comparar, nesse caso, comunidades ao longo tempo. Além disso, arrays também são muito comuns em morfometria geométrica ou sensoriamento remoto.Podemos criar arrays R dispondo elementos de um vetor em um certo número de linhas, colunas e dimensões com função array(). Em nosso exemplo, vamos compor cinco comunidades de cinco espécies ao longo de três períodos.","code":"\n## Array\nar <- array(data = sample(x = c(0, 1), size = 75, rep = TRUE), \n            dim = c(5, 5, 3))\nar## , , 1\n## \n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    0    0    0    0    1\n## [2,]    1    1    0    0    0\n## [3,]    0    1    1    0    1\n## [4,]    1    1    0    0    1\n## [5,]    0    1    0    0    1\n## \n## , , 2\n## \n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    0    1    1    1\n## [2,]    1    0    0    1    1\n## [3,]    1    1    0    0    0\n## [4,]    0    0    0    1    1\n## [5,]    1    0    1    1    0\n## \n## , , 3\n## \n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    0    1    1    0    1\n## [2,]    1    1    0    0    1\n## [3,]    0    1    0    1    1\n## [4,]    0    1    1    1    0\n## [5,]    0    1    1    0    0"},{"path":"cap4.html","id":"data-frame","chapter":"4 Introdução ao R","heading":"4.4.1.2.5 Data frame","text":"O data frame também representa dados formato de tabela, com linhas e colunas, muito semelhante à matriz. Mas diferentemente das matrizes, os data frames comportam mais de um modo em suas colunas. Dessa forma, linhas data frame ainda representam unidades amostrais (locais, transectos, parcelas), mas colunas agora podem representar descrições (informações em texto), variáveis numéricas (discretas ou contínuas), variáveis binárias (TRUE ou FALSE) e variáveis categóricas (nominais ou ordinais).forma mais simples de criar data frames R é através da combinação de vetores. Essa combinação é feita com função data.frame() e ocorre de forma horizontal, semelhante à função cbind(). Sendo assim, todos os vetores precisam ter o mesmo número de elementos, ou seja, o mesmo comprimento. Podemos ainda nomear colunas de cada vetor.","code":"\n## Criar três vetores\nvec_ch <- c(\"sp1\", \"sp2\", \"sp3\")\nvec_nu <- c(4, 5, 6)\nvec_fa <- factor(c(\"campo\", \"floresta\", \"floresta\"))\n\n## Data frame - combinar por colunas - horizontal - um ao lado do outro\ndf <- data.frame(vec_ch, vec_nu, vec_fa)\n\ndf##   vec_ch vec_nu   vec_fa\n## 1    sp1      4    campo\n## 2    sp2      5 floresta\n## 3    sp3      6 floresta\n## Data frame - nomear as colunas\ndf <- data.frame(especies = vec_ch, \n                 abundancia = vec_nu, \n                 vegetacao = vec_fa)\ndf##   especies abundancia vegetacao\n## 1      sp1          4     campo\n## 2      sp2          5  floresta\n## 3      sp3          6  floresta"},{"path":"cap4.html","id":"lista","chapter":"4 Introdução ao R","heading":"4.4.1.2.6 Lista","text":"lista é um tipo especial de vetor que aceita objetos como elementos. Ela é estrutura de dados utilizada para agrupar objetos, e é geralmente saída de muitas funções.Podemos criar listas através da função list(). Essa função funciona de forma semelhante à função c() para criação de vetores, mas agora estamos concatenando objetos. Podemos ainda nomear os elementos (objetos) que estamos combinando.Um ponto interessante para entender data frames, é que eles são listas, em que todos os elementos (colunas) possuem o mesmo número de elementos, ou seja, mesmo comprimento.","code":"\n## Lista\nlista <- list(rep(1, 20), # vector\n              factor(1, 1), # factor\n              cbind(c(1, 2), c(1, 2))) # matrix\nlista## [[1]]\n##  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n## \n## [[2]]\n## [1] 1\n## Levels: 1\n## \n## [[3]]\n##      [,1] [,2]\n## [1,]    1    1\n## [2,]    2    2\n## Lista - nomear os elementos\nlista_nome <- list(vector = rep(1, 20), # vector\n              factor = factor(1, 1), # factor\n              matrix = cbind(c(1, 2), c(1, 2))) # matrix\nlista_nome## $vector\n##  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n## \n## $factor\n## [1] 1\n## Levels: 1\n## \n## $matrix\n##      [,1] [,2]\n## [1,]    1    1\n## [2,]    2    2"},{"path":"cap4.html","id":"funções-1","chapter":"4 Introdução ao R","heading":"4.4.1.2.7 Funções","text":"Uma última estrutura de objetos criados R são funções. Elas são objetos criados pelo usuário e reutilizados para fazer operações específicas. criação de funções geralmente é um tópico tratado num segundo momento, quando o usuário de R adquire certo conhecimento da linguagem. Aqui abordaremos apenas seu funcionamento básico, diferenciando sua estrutura para entendimento e sua diferenciação das demais estruturas.Vamos criar uma função simples que retorna multiplicação de dois termos. Criaremos função com o nome multi, à qual será atribuída uma função com o nome function(), com dois argumentos x e y. Depois disso abrimos chaves {}, que é onde iremos incluir nosso bloco de código. Nosso bloco de código é composto por duas linhas, primeira contendo operação de multiplicação dos argumento com atribuição ao objeto mu e sugunda contendo função return() para retornar o valor da multiplicação.","code":"\n## Criar uma função\nmulti <- function(x, y){\n  \n  mu <- (x * y)\n  return(mu)\n \n}\nmulti## function(x, y){\n##   \n##   mu <- (x * y)\n##   return(mu)\n##  \n## }\n## Uso da função\nmulti(42, 42)## [1] 1764"},{"path":"cap4.html","id":"manipulação-de-objetos-unidimensionais","chapter":"4 Introdução ao R","heading":"4.4.2 Manipulação de objetos unidimensionais","text":"Vamos agora explorar formas de manipular elementos de objetos unidimensionais, ou seja, vetores, fatores e listas.primeira forma de manipulação é através da indexação, utilizando os operadores []. Com indexação podemos acessar elementos de vetores e fatores por sua posição. Utilizaremos números, sequência de números ou operações booleanas para retornar partes dos vetores ou fatores. Podemos ainda retirar elementos dessas estruturas com o operador aritmético -.exemplo seguir, iremos fixar o ponto de partida da amostragem da função sample(), utilizando função set.seed(42) (usamos 42 porque é resposta para vida, o universo e tudo mais - O Guia Mochileiro das Galáxias, mas poderia ser outro número qualquer). Isso permite que o resultado da amostragem aleatório seja igual em diferentes computadores.Podemos ainda fazer uma seleção condicional vetor. Ao utilizarmos operadores relacionais, teremos como resposta um vetor lógico. Esse vetor lógico pode ser utilizado dentro da indexação para seleção de elementos.Além da indexação, temos algumas funções que nos auxiliam em algumas operações com objetos unidimensionais, listadas na Tabela 4.2.Table 4.2: Funções para verificação e resumo de dados unidimensionais.Para listas, também podemos usar indexação [] para acessar ou retirar elementos.Podemos ainda usar indexação dupla [[]] para acessar os valores desses elementos.Para listas nomeadas, podemos ainda utilizar o operador $ para acessar elementos pelo nome.E ainda podemos utilizar funções para medir o comprimento dessa lista, listar os nomes dos elementos ou ainda renomear os elementos: length() e names().","code":"\n## Fixar a amostragem\nset.seed(42)\n\n## Amostrar 10 elementos de uma sequência\nve <- sample(x = seq(0, 2, .05), size = 10)\nve##  [1] 1.80 0.00 1.20 0.45 1.75 0.85 1.15 0.30 1.90 0.20\n## Seleciona o quinto elemento\nve[5]## [1] 1.75\n## Seleciona os elementos de 1 a 5\nve[1:5]## [1] 1.80 0.00 1.20 0.45 1.75\n## Retira o decimo elemento\nve[-10]## [1] 1.80 0.00 1.20 0.45 1.75 0.85 1.15 0.30 1.90\n## Retira os elementos 2 a 9\nve[-(2:9)]## [1] 1.8 0.2\n## Quais valores sao maiores que 1?\nve > 1##  [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\n## Valores acima de 1\nve[ve > 1]## [1] 1.80 1.20 1.75 1.15 1.90\n## Lista\nli <- list(elem1 = 1, elem2 = 2, elem3 = 3)\n\n## Acessar o primeiro elemento\nli[1]## $elem1\n## [1] 1\n## Retirar o primeiro elemento\nli[-1]## $elem2\n## [1] 2\n## \n## $elem3\n## [1] 3\n## Acessar o valor do primeiro elemento\nli[[1]]## [1] 1\n## Acessar o valor do segundo elemento\nli[[2]]## [1] 2\n## Acessar o primeiro elemento\nli$elem1## [1] 1\n## Comprimento\nlength(li)## [1] 3\n## Nomes\nnames(li)## [1] \"elem1\" \"elem2\" \"elem3\"\n## Renomear\nnames(li) <- paste0(\"elemento0\", 1:3)\nli## $elemento01\n## [1] 1\n## \n## $elemento02\n## [1] 2\n## \n## $elemento03\n## [1] 3"},{"path":"cap4.html","id":"manipulação-de-objetos-multidimensionais","chapter":"4 Introdução ao R","heading":"4.4.3 Manipulação de objetos multidimensionais","text":"Da mesma forma que para objetos unidimensionais, podemos manipular elementos de objetos multidimensionais, ou seja, matrizes, data frames e arrays.Novamente, primeira forma de manipulação é através da indexação, utilizando os operadores []. Com indexação podemos acessar elementos de matrizes, data frames e arrays por sua posição. Podemos ainda retirar elementos dessas estruturas com o operador aritmético -.Entretanto, agora temos mais de uma dimensão na estruturação dos elementos dentro dos objetos. Assim, utilizamos números, sequência de números ou operação booleanas para retornar partes desses objetos, mas dimensões têm de ser explicitadas e separadas por vírgulas para acessar linhas e colunas. Essa indexação funciona para matrizes e data frames. Para arrays, especificamos também dimensões, também separadas por vírgulas para acessar essas dimensões.Para data frames, além de utilizar números e/ou sequências de números dentro operador [] simples, assim como podemos utilizar o operador [[]] duplo para retornar apenas os valores de uma linha ou uma coluna. Se colunas estiverem nomeadas, podemos utilizar o nome da coluna de interesse entre aspas dentro dos operadores [] (retornar coluna) e [[]] (retornar apenas os valores), assim como ainda podemos utilizar o operador $ para data frames. Essas últimas operações retornam um vetor, para o qual podemos fazer operações de vetores ou ainda atualizar o valor dessa coluna selecionada ou adicionar outra coluna.Podemos ainda fazer seleções condicionais para retornar linhas com valores que temos interesse, semelhante ao uso de filtro de uma planilha eletrônica.Além disso, há uma série de funções para conferência e manipulação de dados que listamos na Tabela 4.3.Table 4.3: Funções para verificação e resumo de dados multidimensionais.","code":"\n## Matriz\nma <- matrix(1:12, 4, 3)\nma##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n## Indexação\nma[3, ] # linha 3## [1]  3  7 11\nma[, 2] # coluna 2## [1] 5 6 7 8\nma[1, 2] # elemento da linha 1 e coluna 2## [1] 5\nma[1, 1:2] # elementos da linha 1 e coluna 1 e 2## [1] 1 5\nma[1, c(1, 3)] # elementos da linha 1 e coluna 1 e 3## [1] 1 9\nma[-1, ] # retirar a linha 1##      [,1] [,2] [,3]\n## [1,]    2    6   10\n## [2,]    3    7   11\n## [3,]    4    8   12\nma[, -3] # retirar a coluna 3##      [,1] [,2]\n## [1,]    1    5\n## [2,]    2    6\n## [3,]    3    7\n## [4,]    4    8\n## Criar três vetores\nsp <- paste(\"sp\", 1:10, sep = \"\")\nabu <- 1:10\nflo <- factor(rep(c(\"campo\", \"floresta\"), each = 5))\n\n## data frame\ndf <- data.frame(sp, abu, flo)\ndf##      sp abu      flo\n## 1   sp1   1    campo\n## 2   sp2   2    campo\n## 3   sp3   3    campo\n## 4   sp4   4    campo\n## 5   sp5   5    campo\n## 6   sp6   6 floresta\n## 7   sp7   7 floresta\n## 8   sp8   8 floresta\n## 9   sp9   9 floresta\n## 10 sp10  10 floresta\n## [] - números\ndf[, 1]##  [1] \"sp1\"  \"sp2\"  \"sp3\"  \"sp4\"  \"sp5\"  \"sp6\"  \"sp7\"  \"sp8\"  \"sp9\"  \"sp10\"\n## [] - nome das colunas - retorna coluna\ndf[\"flo\"]##         flo\n## 1     campo\n## 2     campo\n## 3     campo\n## 4     campo\n## 5     campo\n## 6  floresta\n## 7  floresta\n## 8  floresta\n## 9  floresta\n## 10 floresta\n## [[]] - nome das colunas - retorna apenas os valores\ndf[[\"flo\"]]##  [1] campo    campo    campo    campo    campo    floresta floresta floresta\n##  [9] floresta floresta\n## Levels: campo floresta\n## $ funciona apenas para data frame \ndf$sp##  [1] \"sp1\"  \"sp2\"  \"sp3\"  \"sp4\"  \"sp5\"  \"sp6\"  \"sp7\"  \"sp8\"  \"sp9\"  \"sp10\"\n## Operação de vetors\nlength(df$abu)## [1] 10\n## Converter colunas\ndf$abu <- as.character(df$abu)\nmode(df$abu)## [1] \"character\"\n## Adicionar colunas\nset.seed(42)\ndf$abu2 <- sample(x = 0:1, size = nrow(df), rep = TRUE)\ndf##      sp abu      flo abu2\n## 1   sp1   1    campo    0\n## 2   sp2   2    campo    0\n## 3   sp3   3    campo    0\n## 4   sp4   4    campo    0\n## 5   sp5   5    campo    1\n## 6   sp6   6 floresta    1\n## 7   sp7   7 floresta    1\n## 8   sp8   8 floresta    1\n## 9   sp9   9 floresta    0\n## 10 sp10  10 floresta    1\n## Selecionar linhas de uma matriz ou data frame \ndf[df$abu > 4, ]##    sp abu      flo abu2\n## 5 sp5   5    campo    1\n## 6 sp6   6 floresta    1\n## 7 sp7   7 floresta    1\n## 8 sp8   8 floresta    1\n## 9 sp9   9 floresta    0\ndf[df$flo == \"floresta\", ]##      sp abu      flo abu2\n## 6   sp6   6 floresta    1\n## 7   sp7   7 floresta    1\n## 8   sp8   8 floresta    1\n## 9   sp9   9 floresta    0\n## 10 sp10  10 floresta    1"},{"path":"cap4.html","id":"valores-faltantes-e-especiais","chapter":"4 Introdução ao R","heading":"4.4.4 Valores faltantes e especiais","text":"Valores faltantes e especiais são valores reservados que representam dados faltantes, indefinições matemáticas, infinitos e objetos nulos.NA (Available): significa dado faltante ou indisponívelNaN (Number): representa indefinições matemáticasInf (Infinito): é um número muito grande ou um limite matemáticoNULL (Nulo): representa um objeto nulo, sendo útil para preenchimento em aplicações de programação","code":"\n## Data frame com elemento NA\ndf <- data.frame(var1 = c(1, 4, 2, NA), var2 = c(1, 4, 5, 2))\ndf##   var1 var2\n## 1    1    1\n## 2    4    4\n## 3    2    5\n## 4   NA    2\n## Resposta booleana para elementos NA\nis.na(df)##       var1  var2\n## [1,] FALSE FALSE\n## [2,] FALSE FALSE\n## [3,] FALSE FALSE\n## [4,]  TRUE FALSE\n## Algum elemento é NA?\nany(is.na(df))## [1] TRUE\n## Remover as linhas com NAs\ndf_sem_na <- na.omit(df)\ndf_sem_na##   var1 var2\n## 1    1    1\n## 2    4    4\n## 3    2    5\n## Substituir NAs por 0\ndf[is.na(df)] <- 0\ndf##   var1 var2\n## 1    1    1\n## 2    4    4\n## 3    2    5\n## 4    0    2\n## Desconsiderar os NAs em funções com o argumento rm.na = TRUE\nsum(1, 2, 3, 4, NA, na.rm = TRUE)## [1] 10\n## NaN - not a number\n0/0## [1] NaN\nlog(-1)## Warning in log(-1): NaNs produced## [1] NaN\n## Limite matemático\n1/0## [1] Inf\n## Número grande\n10^310## [1] Inf\n## Objeto nulo\nnulo <- NULL\nnulo## NULL"},{"path":"cap4.html","id":"diretório-de-trabalho","chapter":"4 Introdução ao R","heading":"4.4.5 Diretório de trabalho","text":"O diretório de trabalho é o endereço da pasta (ou diretório) de onde o R importará ou exportar nossos dados.Podemos utilizar o próprio RStudio para tal tarefa, indo em Session > Set Work Directory > Choose Directory... ou simplesmente utilizar o atalho Ctrl + Shift + H.Podemos ainda utilizar funções R para definir o diretório. Para tanto, podemos navegar com o aplicativo de gerenciador de arquivos (e.g., Windows Explorer) até nosso diretório de interesse e copiar o endereço na barra superior. Voltamos para o R e colamos esse endereço entre aspas como um argumento da função setwd(). É fundamental destacar que em Sistemas Operacionais Windows é necessário inverter barras (\\ por /).Aconselhamos ainda utilizar funções getwd() para retornar o diretório definido na sessão R, assim como funções dir() ou list.files() para listagem dos arquivos diretório, ambas medidas de conferência diretório correto.Outra forma de definir o diretório é digitar tecla tab dentro da função setwd(\"tab\"). Quando apertamos tab dentro das aspas conseguimos selecionar o diretório manualmente, pois abre-se uma lista de diretório que podemos ir selecionando até chegar diretório de interesse.","code":"\n## Definir o diretório de trabalho\nsetwd(\"/home/mude/data/github/livro_r_ecologia/dados\")\n\n## Verificar o diretório\ngetwd()\n\n## Listar os arquivos no diretório\ndir()\nlist.files()\n## Mudar o diretório com a tecla tab\nsetwd(\"`tab`\")"},{"path":"cap4.html","id":"importar-dados","chapter":"4 Introdução ao R","heading":"4.4.6 Importar dados","text":"Uma das operações mais corriqueiras R, antes de realizar alguma análise ou plotar um gráfico, é de importar dados que foram tabulados numa planilha eletrônica e salvos formato .csv, .txt ou .xlsx. Ao importar esse tipo de dado para o R, o formato que o mesmo assume, se nenhum parâmetro especificado, é o da classe data frame, prevendo que planilha de dados possua colunas com diferentes modos.Existem diversas formas de importar dados para o R. Podemos importar utilizando o RStudio, indo na janela Environment (Figura 4.2 (3)) e clicar em “Importar Dataset.”Entretanto, aconselhamos o uso de funções que fiquem salvas em um script para aumentar reprodutibilidade mesmo. Dessa forma, três principais funções para importar os arquivos nos três principais extensões (.csv, .txt ou .xlsx) são, respectivamente: read.csv(), read.table() e openxlsx::read.xlsx(), sendo o último pacote openxlsx.Para exemplificar como importar dados vamos usar os dados de comunidades de anfíbios da Mata Atlântica (Atlantic Amphibians, Vancine et al. (2018)). Faremos o download diretamente site da fonte dos dados.Vamos antes escolher um diretório de trabalho com função setwd(), e em seguida criar um diretório com função dir.create() chamado “dados.” Em seguida, vamos mudar nosso diretório para essa pasta e criar mais um diretório chamado “tabelas,” e por fim, definir esse diretório para que o conteúdo download seja armazenado ali.Agora podemos fazer o download arquivo .zip e extrair tabelas usando função unzip() nesse mesmo diretório.Agora podemos importar tabela de dados com função read.csv(), atribuindo ao objeto intror_anfibios_locais. Devemos atentar para o argumento encoding, que selecionamos aqui como latin1 para corrigir um erro autor dos dados que publicou esse data paper com erros…Esse arquivo foi criado com separador de decimais sendo . e separador de colunas sendo ,. Caso tivesse sido criado com separador de decimais sendo , e separador de colunas sendo ;, usaríamos função read.csv2().Para outros formatos, basta usar outras funções apresentadas, atentando-se para os argumentos específicos de cada função.Outra forma de importar dados, principalmente quando não sabemos exatamente o nome arquivo e também para evitar erros de digitação, é utilizar tecla tab dentro das aspas da função de importação. Dessa forma, conseguimos ter acesso aos arquivos nosso diretório e temos possibilidade de selecioná-los sem erros de digitação.Caso o download não funcione ou haja problemas com importação, disponibilizamos os dados também pacote ecodados.","code":"\n## Instalar o pacote openxlsx\ninstall.packages(\"openxlsx\")\nlibrary(openxlsx)\n## Escolher um diretório\nsetwd(\"/home/mude/data/github/livro_r_ecologia\")\n\n## Criar um diretório 'dados'\ndir.create(\"dados\")\n\n## Escolher diretório 'dados'\nsetwd(\"dados\")\n\n## Criar um diretório 'tabelas'\ndir.create(\"tabelas\")\n\n## Escolher diretório 'tabelas'\nsetwd(\"tabelas\")\n## Download\ndownload.file(url = \"https://esajournals.onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1002%2Fecy.2392&file=ecy2392-sup-0001-DataS1.zip\",\n              destfile = \"atlantic_amphibians.zip\", mode = \"wb\")\n\n## Unzip\nunzip(zipfile = \"atlantic_amphibians.zip\")\n## Importar a tabela de locais\nintror_anfibios_locais <- read.csv(\"dados/tabelas/ATLANTIC_AMPHIBIANS_sites.csv\", encoding = \"latin1\")\n## Importar usando a tecla tab\nintror_anfibios_locais <- read.csv(\"`tab`\")\nintror_anfibios_locais\n## Importar os dados pelo pacote ecodados\ndata(intror_anfibios_locais)\nhead(intror_anfibios_locais)##        id reference_number species_number record sampled_habitat active_methods\n## 1 amp1001             1001             19     ab           fo,ll             as\n## 2 amp1002             1002             16     co        fo,la,ll             as\n## 3 amp1003             1002             14     co        fo,la,ll             as\n## 4 amp1004             1002             13     co        fo,la,ll             as\n## 5 amp1005             1003             30     co        fo,ll,br             as\n## 6 amp1006             1004             42     co  tp,pp,la,ll,is           <NA>\n##   passive_methods complementary_methods      period month_start year_start\n## 1              pt                  <NA> mo,da,tw,ni           9       2000\n## 2              pt                  <NA> mo,da,tw,ni          12       2007\n## 3              pt                  <NA> mo,da,tw,ni          12       2007\n## 4              pt                  <NA> mo,da,tw,ni          12       2007\n## 5            <NA>                  <NA>    mo,da,ni           7       1988\n## 6            <NA>                  <NA>        <NA>          NA         NA\n##   month_finish year_finish effort_months country state state_abbreviation\n## 1            1        2002            16  Brazil Piauí              BR-PI\n## 2            5        2009            17  Brazil Ceará              BR-CE\n## 3            5        2009            17  Brazil Ceará              BR-CE\n## 4            5        2009            17  Brazil Ceará              BR-CE\n## 5            8        2001           157  Brazil Ceará              BR-CE\n## 6           NA          NA            NA  Brazil Ceará              BR-CE\n##              municipality                                site  latitude\n## 1         Canto do Buriti Parque Nacional Serra das Confusões -8.680000\n## 2 São Gonçalo do Amarante                               Dunas -3.545527\n## 3 São Gonçalo do Amarante  Jardim Botânico Municipal de Bauru -3.574194\n## 4 São Gonçalo do Amarante                               Taíba -3.515250\n## 5                Baturité                   Serra de Baturité -4.280556\n## 6             Quebrangulo  Reserva Biológica de Pedra Talhada -9.229167\n##   longitude coordinate_precision altitude temperature precipitation\n## 1 -43.42194                   gm      543       24.98           853\n## 2 -38.85783                   dd       15       26.53          1318\n## 3 -38.88869                   dd       29       26.45          1248\n## 4 -38.91880                   dd       25       26.55          1376\n## 5 -38.91083                   gm      750       21.35          1689\n## 6 -36.42806                 <NA>      745       20.45          1249"},{"path":"cap4.html","id":"conferência-dos-dados-importados","chapter":"4 Introdução ao R","heading":"4.4.7 Conferência dos dados importados","text":"Uma vez importados os dados para o R, geralmente antes de iniciarmos qualquer manipulação, visualização ou análise de dados, fazemos conferência desses dados. Para isso, podemos utilizar funções listadas na Tabela 4.3.Dentre todas essas funções de verificação, destacamos importância destas funções apresentadas abaixo para saber se variáveis foram importadas e interpretadas corretamente e reconhecer erros de digitação, por exemplo.","code":"\n## Primeiras linhas\nhead(intror_anfibios_locais)##        id reference_number species_number record sampled_habitat active_methods\n## 1 amp1001             1001             19     ab           fo,ll             as\n## 2 amp1002             1002             16     co        fo,la,ll             as\n## 3 amp1003             1002             14     co        fo,la,ll             as\n## 4 amp1004             1002             13     co        fo,la,ll             as\n## 5 amp1005             1003             30     co        fo,ll,br             as\n## 6 amp1006             1004             42     co  tp,pp,la,ll,is           <NA>\n##   passive_methods complementary_methods      period month_start year_start\n## 1              pt                  <NA> mo,da,tw,ni           9       2000\n## 2              pt                  <NA> mo,da,tw,ni          12       2007\n## 3              pt                  <NA> mo,da,tw,ni          12       2007\n## 4              pt                  <NA> mo,da,tw,ni          12       2007\n## 5            <NA>                  <NA>    mo,da,ni           7       1988\n## 6            <NA>                  <NA>        <NA>          NA         NA\n##   month_finish year_finish effort_months country state state_abbreviation\n## 1            1        2002            16  Brazil Piauí              BR-PI\n## 2            5        2009            17  Brazil Ceará              BR-CE\n## 3            5        2009            17  Brazil Ceará              BR-CE\n## 4            5        2009            17  Brazil Ceará              BR-CE\n## 5            8        2001           157  Brazil Ceará              BR-CE\n## 6           NA          NA            NA  Brazil Ceará              BR-CE\n##              municipality                                site  latitude\n## 1         Canto do Buriti Parque Nacional Serra das Confusões -8.680000\n## 2 São Gonçalo do Amarante                               Dunas -3.545527\n## 3 São Gonçalo do Amarante  Jardim Botânico Municipal de Bauru -3.574194\n## 4 São Gonçalo do Amarante                               Taíba -3.515250\n## 5                Baturité                   Serra de Baturité -4.280556\n## 6             Quebrangulo  Reserva Biológica de Pedra Talhada -9.229167\n##   longitude coordinate_precision altitude temperature precipitation\n## 1 -43.42194                   gm      543       24.98           853\n## 2 -38.85783                   dd       15       26.53          1318\n## 3 -38.88869                   dd       29       26.45          1248\n## 4 -38.91880                   dd       25       26.55          1376\n## 5 -38.91083                   gm      750       21.35          1689\n## 6 -36.42806                 <NA>      745       20.45          1249\n## Últimas linhas\ntail(intror_anfibios_locais)##           id reference_number species_number record sampled_habitat\n## 1158 amp2158             1389              3     co            <NA>\n## 1159 amp2159             1389              9     co            <NA>\n## 1160 amp2160             1389              6     co            <NA>\n## 1161 amp2161             1389              1     co            <NA>\n## 1162 amp2162             1389              2     co            <NA>\n## 1163 amp2163             1389              2     co            <NA>\n##      active_methods passive_methods complementary_methods period month_start\n## 1158           <NA>            <NA>                  <NA>   <NA>          NA\n## 1159           <NA>            <NA>                  <NA>   <NA>          NA\n## 1160           <NA>            <NA>                  <NA>   <NA>          NA\n## 1161           <NA>            <NA>                  <NA>   <NA>          NA\n## 1162           <NA>            <NA>                  <NA>   <NA>          NA\n## 1163           <NA>            <NA>                  <NA>   <NA>          NA\n##      year_start month_finish year_finish effort_months   country    state\n## 1158         NA           NA          NA            NA Argentina Misiones\n## 1159         NA           NA          NA            NA Argentina Misiones\n## 1160         NA           NA          NA            NA Argentina Misiones\n## 1161         NA           NA          NA            NA Argentina Misiones\n## 1162         NA           NA          NA            NA Argentina Misiones\n## 1163         NA           NA          NA            NA Argentina Misiones\n##      state_abbreviation    municipality                          site  latitude\n## 1158               AR-N Manuel Belgrano          Comandante Andresito -25.66944\n## 1159               AR-N         Posadas                       Posadas -27.45333\n## 1160               AR-N      Montecarlo                    Montecarlo -26.56889\n## 1161               AR-N       San Pedro                Refugio Moconá -27.14083\n## 1162               AR-N        Cainguás Balneario Municipal Cuñá Pirú -27.08722\n## 1163               AR-N           Oberá       Chacra San Juan de Dios -27.47333\n##      longitude coordinate_precision altitude temperature precipitation\n## 1158 -54.04556                  gms      251       19.94          1780\n## 1159 -55.89250                  gms      105       21.30          1768\n## 1160 -53.60889                  gms      597       18.35          1954\n## 1161 -53.92611                  gms      202       19.92          1850\n## 1162 -54.95278                  gms      213       21.04          1553\n## 1163 -55.17194                  gms      254       20.67          1683\n## Número de linhas e colunas\nnrow(intror_anfibios_locais)## [1] 1163\nncol(intror_anfibios_locais)## [1] 25\ndim(intror_anfibios_locais)## [1] 1163   25\n## Nome das linhas e colunas\nrownames(intror_anfibios_locais)\ncolnames(intror_anfibios_locais)\n\n## Estrutura dos dados\nstr(intror_anfibios_locais)\n\n## Resumo dos dados\nsummary(intror_anfibios_locais)\n\n## Verificar NAs\nany(is.na(intror_anfibios_locais))\nwhich(is.na(intror_anfibios_locais))\n\n## Remover as linhas com NAs\nintror_anfibios_locais_na <- na.omit(intror_anfibios_locais)"},{"path":"cap4.html","id":"exportar-dados","chapter":"4 Introdução ao R","heading":"4.4.8 Exportar dados","text":"Uma vez realizado operações de manipulação ou tendo dados que foram analisados e armazenados num objeto formato de data frame ou matriz, podemos exportar esses dados R para o diretório que definimos anteriormente.Para tanto, podemos utilizar funções de escrita de dados, como write.csv(), write.table() e openxlsx::write.xlsx(). Dois pontos são fundamentais: 1. o nome arquivo tem de estar entre aspas e final dele deve constar extensão que pretendemos que o arquivo tenha; 2. é interessante utilizar os argumentos row.names = FALSE e quote=FALSE, para que o arquivo escrito não tenha o nome das linhas ou aspas em todas células, respectivamente.","code":"\n## Exportar dados na extensão .csv\nwrite.csv(intror_anfibios_locais_na, \"ATLANTIC_AMPHIBIAN_sites_na.csv\", \n          row.names = FALSE, quote = FALSE)\n\n## Exportar dados na extensão .txt\nwrite.table(intror_anfibios_locais_na, \"ATLANTIC_AMPHIBIAN_sites_na.txt\", \n            row.names = FALSE, quote = FALSE)\n\n## Exportar dados na extensão .xlsx\nopenxlsx::write.xlsx(intror_anfibios_locais_na, \"ATLANTIC_AMPHIBIAN_sites_na.xlsx\", \n                     row.names = FALSE, quote = FALSE)"},{"path":"cap4.html","id":"exercícios","chapter":"4 Introdução ao R","heading":"4.5 Exercícios","text":"Use o R para verificar o resultado da operação 7 + 7 ÷ 7 + 7 x 7 - 7.Use o R para verificar o resultado da operação 7 + 7 ÷ 7 + 7 x 7 - 7.Verifique através R se 3x2³ é maior que 2x3².Verifique através R se 3x2³ é maior que 2x3².Crie dois objetos (qualquer nome) com os valores 100 e 300. Multiplique esses objetos (função prod()) e atribuam ao objeto mult. Faça o logaritmo natural (função log()) objeto mult e atribuam ao objeto ln.Crie dois objetos (qualquer nome) com os valores 100 e 300. Multiplique esses objetos (função prod()) e atribuam ao objeto mult. Faça o logaritmo natural (função log()) objeto mult e atribuam ao objeto ln.Quantos pacotes existem CRAN nesse momento? Execute essa combinação Console: nrow(available.packages(repos = \"http://cran.r-project.org\")).Quantos pacotes existem CRAN nesse momento? Execute essa combinação Console: nrow(available.packages(repos = \"http://cran.r-project.org\")).Instale o pacote tidyverse CRAN.Instale o pacote tidyverse CRAN.Escolha números para jogar na mega-sena usando o R, nomeando o objeto como mega. Lembrando: são 6 valores de 1 60 e atribuam um objeto.Escolha números para jogar na mega-sena usando o R, nomeando o objeto como mega. Lembrando: são 6 valores de 1 60 e atribuam um objeto.Crie um fator chamado tr, com dois níveis (“cont” e “trat”) para descrever 100 locais de amostragem, 50 de cada tratamento. O fator deve ser dessa forma cont, cont, cont, ...., cont, trat, trat, ...., trat.Crie um fator chamado tr, com dois níveis (“cont” e “trat”) para descrever 100 locais de amostragem, 50 de cada tratamento. O fator deve ser dessa forma cont, cont, cont, ...., cont, trat, trat, ...., trat.Crie uma matriz chamada ma, resultante da disposição de um vetor composto por 10000 valores aleatórios entre 0 e 10. matriz deve conter 100 linhas e ser disposta por colunas.Crie uma matriz chamada ma, resultante da disposição de um vetor composto por 10000 valores aleatórios entre 0 e 10. matriz deve conter 100 linhas e ser disposta por colunas.Crie um data frame chamado df, resultante da composição desses vetores:Crie um data frame chamado df, resultante da composição desses vetores:id: 1:50sp: sp01, sp02, ..., sp49, sp50ab: 50 valores aleatórios entre 0 5Crie uma lista com os objetos criados anteriormente: mega, tr, ma e df.Crie uma lista com os objetos criados anteriormente: mega, tr, ma e df.Selecione os elementos ímpares objeto tr, e atribua ao objeto tr_impar.Selecione os elementos ímpares objeto tr, e atribua ao objeto tr_impar.Selecione linhas com ids pares objeto df, e atribua ao objeto df_ids_par.Selecione linhas com ids pares objeto df, e atribua ao objeto df_ids_par.Faça uma amostragem de 10 linhas objeto df, e atribua ao objeto df_amos10.Faça uma amostragem de 10 linhas objeto df, e atribua ao objeto df_amos10.","code":""},{"path":"cap4.html","id":"para-se-aprofundar","chapter":"4 Introdução ao R","heading":"4.6 Para se aprofundar","text":"Listamos seguir livros e links com material que recomendamos para seguir com sua aprendizagem em R Base.","code":""},{"path":"cap4.html","id":"livros","chapter":"4 Introdução ao R","heading":"4.6.1 Livros","text":"Mayer F. P., Bonat W. H., Zeviani W. M., Krainski E. T., Ribeiro Jr. P. J. 2018. Estatística Computacional com R. [http://cursos.leg.ufpr.br/ecr/index.html]Zeviani W. M. 2019. Manual de Planejamento e Análise de Experimentos com R. [http://leg.ufpr.br/~walmes/mpaer/]Curso-R. 2021. Ciência de Dados em R. [https://livro.curso-r.com/]Adler J. 2012. R Nutshell: Desktop Quick Reference. 2 ed. O’Reilly Media.Burns P. 2011. R Inferno. [https://www.burns-stat.com/pages/Tutor/R_inferno.pdf]Cotton R. 2013. Learning R: Step--Step Function Guide Data Analysis. O’Reilly Media.Crawley MJ. 2012. R Book. 2 ed. Wiley.Davies TM. 2016. Book R: First Course Programming Statistics. Starch Press.Douglas , Roos D, Mancini F, Couto , Lusseau D. Introduction R. 2021 [https://intro2r.com/]Engel C. 2019. Introduction R. [https://cengel.github.io/R-intro/]Gillespie C., Lovelace R, 2016. Efficient R programming. O’Reilly Media. [https://bookdown.org/csgillespie/efficientR/]Grolemund G. 2014. Hands-Programming R. O’Reilly Media.Holmes S, Huber W. 2019. Modern Statistics Modern Biology. Cambridge University Press. [https://www.huber.embl.de/msmb/]Irizarry RA, Love MI. 2016. Data Analysis Life Sciences R. Chapman Hall/CRC.James G, Witten D, Hastie T, Tibshirani R. 2013. Introduction Statistical Learning: Applications R. 2 ed. Springer. [http://faculty.marshall.usc.edu/gareth-james/ISL/]Kabacoff RI. 2015. R Action: Data analysis graphics R. 2 ed. Manning.Lander JP. 2017. R Everyone: Advanced Analytics Graphics. Addison-Wesley Professional.Matloff N. 2011. Art R Programming: Tour Statistical Software Design. Starch Press.Long JD, Teetor P. 2019. R Cookbook.2 ed. O’Reilly Media. [https://rc2e.com/]Wickham H. 2019. Advanced R. 2 ed. Chapman Hall/CRC. [https://adv-r.hadley.nz/]Wickham H. 2015. R Packages: Organize, Test, Document, Share Code. O’Reilly Media. [https://r-pkgs.org/]","code":""},{"path":"cap4.html","id":"links","chapter":"4 Introdução ao R","heading":"4.6.2 Links","text":"Materiais sobre RR resources (free courses, books, tutorials, & cheat sheets)Data Science Ecologists Environmental ScientistsData Analysis Visualization R EcologistsA () shortintroduction R - Paul Torfs & Claudia BrauerR forBeginners - Emmanuel Paradis","code":""},{"path":"referências-1.html","id":"referências-1","chapter":"Referências","heading":"Referências","text":"","code":""}]
